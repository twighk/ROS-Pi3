;; Auto-generated. Do not edit!


(when (boundp 'control_msgs::PointHeadGoal)
  (if (not (find-package "CONTROL_MSGS"))
    (make-package "CONTROL_MSGS"))
  (shadow 'PointHeadGoal (find-package "CONTROL_MSGS")))
(unless (find-package "CONTROL_MSGS::POINTHEADGOAL")
  (make-package "CONTROL_MSGS::POINTHEADGOAL"))

(in-package "ROS")
;;//! \htmlinclude PointHeadGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass control_msgs::PointHeadGoal
  :super ros::object
  :slots (_target _pointing_axis _pointing_frame _min_duration _max_velocity ))

(defmethod control_msgs::PointHeadGoal
  (:init
   (&key
    ((:target __target) (instance geometry_msgs::PointStamped :init))
    ((:pointing_axis __pointing_axis) (instance geometry_msgs::Vector3 :init))
    ((:pointing_frame __pointing_frame) "")
    ((:min_duration __min_duration) (instance ros::time :init))
    ((:max_velocity __max_velocity) 0.0)
    )
   (send-super :init)
   (setq _target __target)
   (setq _pointing_axis __pointing_axis)
   (setq _pointing_frame (string __pointing_frame))
   (setq _min_duration __min_duration)
   (setq _max_velocity (float __max_velocity))
   self)
  (:target
   (&rest __target)
   (if (keywordp (car __target))
       (send* _target __target)
     (progn
       (if __target (setq _target (car __target)))
       _target)))
  (:pointing_axis
   (&rest __pointing_axis)
   (if (keywordp (car __pointing_axis))
       (send* _pointing_axis __pointing_axis)
     (progn
       (if __pointing_axis (setq _pointing_axis (car __pointing_axis)))
       _pointing_axis)))
  (:pointing_frame
   (&optional __pointing_frame)
   (if __pointing_frame (setq _pointing_frame __pointing_frame)) _pointing_frame)
  (:min_duration
   (&optional __min_duration)
   (if __min_duration (setq _min_duration __min_duration)) _min_duration)
  (:max_velocity
   (&optional __max_velocity)
   (if __max_velocity (setq _max_velocity __max_velocity)) _max_velocity)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PointStamped _target
    (send _target :serialization-length)
    ;; geometry_msgs/Vector3 _pointing_axis
    (send _pointing_axis :serialization-length)
    ;; string _pointing_frame
    4 (length _pointing_frame)
    ;; duration _min_duration
    8
    ;; float64 _max_velocity
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PointStamped _target
       (send _target :serialize s)
     ;; geometry_msgs/Vector3 _pointing_axis
       (send _pointing_axis :serialize s)
     ;; string _pointing_frame
       (write-long (length _pointing_frame) s) (princ _pointing_frame s)
     ;; duration _min_duration
       (write-long (send _min_duration :sec) s) (write-long (send _min_duration :nsec) s)
     ;; float64 _max_velocity
       (sys::poke _max_velocity (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PointStamped _target
     (send _target :deserialize buf ptr-) (incf ptr- (send _target :serialization-length))
   ;; geometry_msgs/Vector3 _pointing_axis
     (send _pointing_axis :deserialize buf ptr-) (incf ptr- (send _pointing_axis :serialization-length))
   ;; string _pointing_frame
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _pointing_frame (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; duration _min_duration
     (send _min_duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _min_duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float64 _max_velocity
     (setq _max_velocity (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get control_msgs::PointHeadGoal :md5sum-) "8b92b1cd5e06c8a94c917dc3209a4c1d")
(setf (get control_msgs::PointHeadGoal :datatype-) "control_msgs/PointHeadGoal")
(setf (get control_msgs::PointHeadGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PointStamped target
geometry_msgs/Vector3 pointing_axis
string pointing_frame
duration min_duration
float64 max_velocity

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :control_msgs/PointHeadGoal "8b92b1cd5e06c8a94c917dc3209a4c1d")



/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "view_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/view_manager.h>
#line 13 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"

#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 7 "view_controller.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/view_controller.h>
#line 21 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 25 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 37 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 269 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 40 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 43 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 55 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 58 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 61 "/opt/ros_catkin_ws/devel_isolated/rviz/bin/sip/rviz_sip/siplibrviz_siprvizViewManager.cpp"


extern "C" {static PyObject *meth_rviz_ViewManager_initialize(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewManager, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initialize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_initialize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_update(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_rviz_ViewManager, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_update, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_getCurrent(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_getCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewManager, &sipCpp))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCurrent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_getCurrent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_create(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->create(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_getNumViews(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_getNumViews(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewManager, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getNumViews();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_getNumViews, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_getViewAt(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_getViewAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_rviz_ViewManager, &sipCpp, &a0))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getViewAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_getViewAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_add(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewController* a0;
        int a1 = -1;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|i", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_ViewController, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->add(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_add, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_take(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_take(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewController* a0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_ViewController, &a0))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->take(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_take, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_takeAt(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_rviz_ViewManager, &sipCpp, &a0))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_takeAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_load(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const rviz::Config* a0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->rviz::ViewManager::load(*a0) : sipCpp->load(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_save(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        rviz::Config* a0;
        const rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->rviz::ViewManager::save(*a0) : sipCpp->save(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_setCurrentFrom(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_setCurrentFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewController* a0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_ViewController, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentFrom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_setCurrentFrom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_copy(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewController* a0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_rviz_ViewController, &a0))
        {
            rviz::ViewController*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copy(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_rviz_ViewController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_copy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_copyCurrentToList(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_copyCurrentToList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_ViewManager, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->copyCurrentToList();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_copyCurrentToList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_ViewManager_setCurrentViewControllerType(PyObject *, PyObject *);}
static PyObject *meth_rviz_ViewManager_setCurrentViewControllerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        rviz::ViewManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_ViewManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentViewControllerType(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ViewManager, sipName_setCurrentViewControllerType, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_rviz_ViewManager(void *, const sipTypeDef *);}
static void *cast_rviz_ViewManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_rviz_ViewManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(rviz::ViewManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_ViewManager(void *, int);}
static void release_rviz_ViewManager(void *sipCppV,int)
{
    rviz::ViewManager *sipCpp = reinterpret_cast<rviz::ViewManager *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_rviz_ViewManager(sipSimpleWrapper *);}
static void dealloc_rviz_ViewManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_rviz_ViewManager(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_ViewManager[] = {{143, 0, 1}};


static PyMethodDef methods_rviz_ViewManager[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_rviz_ViewManager_add, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copy), meth_rviz_ViewManager_copy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copyCurrentToList), meth_rviz_ViewManager_copyCurrentToList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_rviz_ViewManager_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCurrent), meth_rviz_ViewManager_getCurrent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNumViews), meth_rviz_ViewManager_getNumViews, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getViewAt), meth_rviz_ViewManager_getViewAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initialize), meth_rviz_ViewManager_initialize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_rviz_ViewManager_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_rviz_ViewManager_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentFrom), meth_rviz_ViewManager_setCurrentFrom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentViewControllerType), meth_rviz_ViewManager_setCurrentViewControllerType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_take), meth_rviz_ViewManager_take, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_rviz_ViewManager_takeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_update), meth_rviz_ViewManager_update, METH_VARARGS, NULL}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_rviz_ViewManager[] = {
    {"currentChanged()", 0, 0, 0},
    {"configChanged()", 0, 0, 0},
    {0, 0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_librviz_sip_rviz_ViewManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_rviz__ViewManager,
        {0}
    },
    {
        sipNameNr_ViewManager,
        {0, 255, 0},
        15, methods_rviz_ViewManager,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_rviz_ViewManager,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_rviz_ViewManager,
    0,
    0,
    0,
    release_rviz_ViewManager,
    cast_rviz_ViewManager,
    0,
    0,
    0,
    0,
    0,
    0
},
    &rviz::ViewManager::staticMetaObject,
    0,
    signals_rviz_ViewManager,
};

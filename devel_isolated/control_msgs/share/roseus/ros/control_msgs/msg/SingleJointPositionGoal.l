;; Auto-generated. Do not edit!


(when (boundp 'control_msgs::SingleJointPositionGoal)
  (if (not (find-package "CONTROL_MSGS"))
    (make-package "CONTROL_MSGS"))
  (shadow 'SingleJointPositionGoal (find-package "CONTROL_MSGS")))
(unless (find-package "CONTROL_MSGS::SINGLEJOINTPOSITIONGOAL")
  (make-package "CONTROL_MSGS::SINGLEJOINTPOSITIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude SingleJointPositionGoal.msg.html


(defclass control_msgs::SingleJointPositionGoal
  :super ros::object
  :slots (_position _min_duration _max_velocity ))

(defmethod control_msgs::SingleJointPositionGoal
  (:init
   (&key
    ((:position __position) 0.0)
    ((:min_duration __min_duration) (instance ros::time :init))
    ((:max_velocity __max_velocity) 0.0)
    )
   (send-super :init)
   (setq _position (float __position))
   (setq _min_duration __min_duration)
   (setq _max_velocity (float __max_velocity))
   self)
  (:position
   (&optional __position)
   (if __position (setq _position __position)) _position)
  (:min_duration
   (&optional __min_duration)
   (if __min_duration (setq _min_duration __min_duration)) _min_duration)
  (:max_velocity
   (&optional __max_velocity)
   (if __max_velocity (setq _max_velocity __max_velocity)) _max_velocity)
  (:serialization-length
   ()
   (+
    ;; float64 _position
    8
    ;; duration _min_duration
    8
    ;; float64 _max_velocity
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _position
       (sys::poke _position (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; duration _min_duration
       (write-long (send _min_duration :sec) s) (write-long (send _min_duration :nsec) s)
     ;; float64 _max_velocity
       (sys::poke _max_velocity (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _position
     (setq _position (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; duration _min_duration
     (send _min_duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _min_duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float64 _max_velocity
     (setq _max_velocity (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get control_msgs::SingleJointPositionGoal :md5sum-) "fbaaa562a23a013fd5053e5f72cbb35c")
(setf (get control_msgs::SingleJointPositionGoal :datatype-) "control_msgs/SingleJointPositionGoal")
(setf (get control_msgs::SingleJointPositionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
float64 position
duration min_duration
float64 max_velocity

")



(provide :control_msgs/SingleJointPositionGoal "fbaaa562a23a013fd5053e5f72cbb35c")



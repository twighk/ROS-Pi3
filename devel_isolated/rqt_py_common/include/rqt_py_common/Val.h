// Generated by gencpp from file rqt_py_common/Val.msg
// DO NOT EDIT!


#ifndef RQT_PY_COMMON_MESSAGE_VAL_H
#define RQT_PY_COMMON_MESSAGE_VAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rqt_py_common
{
template <class ContainerAllocator>
struct Val_
{
  typedef Val_<ContainerAllocator> Type;

  Val_()
    : floats()  {
      floats.assign(0.0);
  }
  Val_(const ContainerAllocator& _alloc)
    : floats()  {
  (void)_alloc;
      floats.assign(0.0);
  }



   typedef boost::array<double, 5>  _floats_type;
  _floats_type floats;




  typedef boost::shared_ptr< ::rqt_py_common::Val_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rqt_py_common::Val_<ContainerAllocator> const> ConstPtr;

}; // struct Val_

typedef ::rqt_py_common::Val_<std::allocator<void> > Val;

typedef boost::shared_ptr< ::rqt_py_common::Val > ValPtr;
typedef boost::shared_ptr< ::rqt_py_common::Val const> ValConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rqt_py_common::Val_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rqt_py_common::Val_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rqt_py_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros_catkin_ws/install_isolated/share/std_msgs/cmake/../msg'], 'rqt_py_common': ['/opt/ros_catkin_ws/src/rqt_common_plugins/rqt_py_common/test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rqt_py_common::Val_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rqt_py_common::Val_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_py_common::Val_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_py_common::Val_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_py_common::Val_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_py_common::Val_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rqt_py_common::Val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ca05234743a5086bfd02946376b9ff6";
  }

  static const char* value(const ::rqt_py_common::Val_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ca05234743a5086ULL;
  static const uint64_t static_value2 = 0xbfd02946376b9ff6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rqt_py_common::Val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rqt_py_common/Val";
  }

  static const char* value(const ::rqt_py_common::Val_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rqt_py_common::Val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[5] floats\n\
";
  }

  static const char* value(const ::rqt_py_common::Val_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rqt_py_common::Val_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.floats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Val_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rqt_py_common::Val_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rqt_py_common::Val_<ContainerAllocator>& v)
  {
    s << indent << "floats[]" << std::endl;
    for (size_t i = 0; i < v.floats.size(); ++i)
    {
      s << indent << "  floats[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.floats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RQT_PY_COMMON_MESSAGE_VAL_H

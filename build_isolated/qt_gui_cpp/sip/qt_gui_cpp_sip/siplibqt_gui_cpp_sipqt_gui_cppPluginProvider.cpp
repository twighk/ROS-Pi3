/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 7 "plugin_provider.sip"
#include <qt_gui_cpp/plugin_provider.h>
#line 12 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"

#line 8 "plugin.sip"
#include <qt_gui_cpp/plugin.h>
#line 16 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 19 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 7 "plugin_context.sip"
#include <qt_gui_cpp/plugin_context.h>
#line 22 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 25 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 7 "plugin_descriptor.sip"
#include <qt_gui_cpp/plugin_descriptor.h>
#line 28 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 31 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmap.sip"
#include <qmap.h>
#line 34 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"
#line 72 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 37 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginProvider.cpp"


class sipqt_gui_cpp_PluginProvider : public qt_gui_cpp::PluginProvider
{
public:
    sipqt_gui_cpp_PluginProvider();
    sipqt_gui_cpp_PluginProvider(const qt_gui_cpp::PluginProvider&);
    virtual ~sipqt_gui_cpp_PluginProvider();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void shutdown();
    void unload_plugin(qt_gui_cpp::Plugin*);
    void unload(void*);
    qt_gui_cpp::Plugin* load_plugin(const QString&,qt_gui_cpp::PluginContext*);
    void* load(const QString&,qt_gui_cpp::PluginContext*);
    QList<qt_gui_cpp::PluginDescriptor*> discover_descriptors(QObject*);
    QMap<QString,QString> discover(QObject*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipqt_gui_cpp_PluginProvider(const sipqt_gui_cpp_PluginProvider &);
    sipqt_gui_cpp_PluginProvider &operator = (const sipqt_gui_cpp_PluginProvider &);

    char sipPyMethods[7];
};

sipqt_gui_cpp_PluginProvider::sipqt_gui_cpp_PluginProvider(): qt_gui_cpp::PluginProvider(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipqt_gui_cpp_PluginProvider::sipqt_gui_cpp_PluginProvider(const qt_gui_cpp::PluginProvider& a0): qt_gui_cpp::PluginProvider(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipqt_gui_cpp_PluginProvider::~sipqt_gui_cpp_PluginProvider()
{
    sipCommonDtor(sipPySelf);
}

void sipqt_gui_cpp_PluginProvider::shutdown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_shutdown);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginProvider::shutdown();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipqt_gui_cpp_PluginProvider::unload_plugin(qt_gui_cpp::Plugin*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_unload_plugin);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginProvider::unload_plugin(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qt_gui_cpp::Plugin*);

    sipVH_libqt_gui_cpp_sip_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginProvider::unload(void*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_unload);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginProvider::unload(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, void*);

    sipVH_libqt_gui_cpp_sip_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qt_gui_cpp::Plugin* sipqt_gui_cpp_PluginProvider::load_plugin(const QString& a0,qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_load_plugin);

    if (!sipMeth)
        return qt_gui_cpp::PluginProvider::load_plugin(a0,a1);

    extern qt_gui_cpp::Plugin* sipVH_libqt_gui_cpp_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void* sipqt_gui_cpp_PluginProvider::load(const QString& a0,qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_load);

    if (!sipMeth)
        return qt_gui_cpp::PluginProvider::load(a0,a1);

    extern void* sipVH_libqt_gui_cpp_sip_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_2(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QList<qt_gui_cpp::PluginDescriptor*> sipqt_gui_cpp_PluginProvider::discover_descriptors(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_discover_descriptors);

    if (!sipMeth)
        return qt_gui_cpp::PluginProvider::discover_descriptors(a0);

    extern QList<qt_gui_cpp::PluginDescriptor*> sipVH_libqt_gui_cpp_sip_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_libqt_gui_cpp_sip_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMap<QString,QString> sipqt_gui_cpp_PluginProvider::discover(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_discover);

    if (!sipMeth)
        return qt_gui_cpp::PluginProvider::discover(a0);

    extern QMap<QString,QString> sipVH_libqt_gui_cpp_sip_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_libqt_gui_cpp_sip_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_discover(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_discover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, sipType_QObject, &a0))
        {
            QMap<QString,QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QString>((sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::discover(a0) : sipCpp->discover(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_discover, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_discover_descriptors(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_discover_descriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, sipType_QObject, &a0))
        {
            QList<qt_gui_cpp::PluginDescriptor*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<qt_gui_cpp::PluginDescriptor*>((sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::discover_descriptors(a0) : sipCpp->discover_descriptors(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101qt_gui_cpp_PluginDescriptor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_discover_descriptors, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_load(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        qt_gui_cpp::PluginContext* a1;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::load(*a0,a1) : sipCpp->load(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_load_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_load_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        qt_gui_cpp::PluginContext* a1;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            qt_gui_cpp::Plugin*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::load_plugin(*a0,a1) : sipCpp->load_plugin(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_load_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_unload(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        void* a0;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::unload(a0) : sipCpp->unload(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_unload, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_unload_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_unload_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::Plugin* a0;
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp, sipType_qt_gui_cpp_Plugin, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::unload_plugin(a0) : sipCpp->unload_plugin(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_unload_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginProvider_shutdown(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginProvider_shutdown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::PluginProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_PluginProvider, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginProvider::shutdown() : sipCpp->shutdown());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginProvider, sipName_shutdown, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_qt_gui_cpp_PluginProvider(void *, const sipTypeDef *);}
static void *cast_qt_gui_cpp_PluginProvider(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_qt_gui_cpp_PluginProvider)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_qt_gui_cpp_PluginProvider(void *, int);}
static void release_qt_gui_cpp_PluginProvider(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipqt_gui_cpp_PluginProvider *>(sipCppV);
    else
        delete reinterpret_cast<qt_gui_cpp::PluginProvider *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_qt_gui_cpp_PluginProvider(void *, SIP_SSIZE_T, const void *);}
static void assign_qt_gui_cpp_PluginProvider(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<qt_gui_cpp::PluginProvider *>(sipDst)[sipDstIdx] = *reinterpret_cast<const qt_gui_cpp::PluginProvider *>(sipSrc);
}


extern "C" {static void *array_qt_gui_cpp_PluginProvider(SIP_SSIZE_T);}
static void *array_qt_gui_cpp_PluginProvider(SIP_SSIZE_T sipNrElem)
{
    return new qt_gui_cpp::PluginProvider[sipNrElem];
}


extern "C" {static void *copy_qt_gui_cpp_PluginProvider(const void *, SIP_SSIZE_T);}
static void *copy_qt_gui_cpp_PluginProvider(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new qt_gui_cpp::PluginProvider(reinterpret_cast<const qt_gui_cpp::PluginProvider *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_qt_gui_cpp_PluginProvider(sipSimpleWrapper *);}
static void dealloc_qt_gui_cpp_PluginProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipqt_gui_cpp_PluginProvider *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_qt_gui_cpp_PluginProvider(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_qt_gui_cpp_PluginProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_qt_gui_cpp_PluginProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipqt_gui_cpp_PluginProvider *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipqt_gui_cpp_PluginProvider();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const qt_gui_cpp::PluginProvider* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_qt_gui_cpp_PluginProvider, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipqt_gui_cpp_PluginProvider(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_qt_gui_cpp_PluginProvider[] = {
    {SIP_MLNAME_CAST(sipName_discover), meth_qt_gui_cpp_PluginProvider_discover, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_discover_descriptors), meth_qt_gui_cpp_PluginProvider_discover_descriptors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_qt_gui_cpp_PluginProvider_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load_plugin), meth_qt_gui_cpp_PluginProvider_load_plugin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shutdown), meth_qt_gui_cpp_PluginProvider_shutdown, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unload), meth_qt_gui_cpp_PluginProvider_unload, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unload_plugin), meth_qt_gui_cpp_PluginProvider_unload_plugin, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_libqt_gui_cpp_sip_qt_gui_cpp_PluginProvider = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_qt_gui_cpp__PluginProvider,
        {0}
    },
    {
        sipNameNr_PluginProvider,
        {3, 255, 0},
        7, methods_qt_gui_cpp_PluginProvider,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_qt_gui_cpp_PluginProvider,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_qt_gui_cpp_PluginProvider,
    assign_qt_gui_cpp_PluginProvider,
    array_qt_gui_cpp_PluginProvider,
    copy_qt_gui_cpp_PluginProvider,
    release_qt_gui_cpp_PluginProvider,
    cast_qt_gui_cpp_PluginProvider,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 9 "ros_pluginlib_plugin_provider_for_plugins.sip"
#include <qt_gui_cpp/ros_pluginlib_plugin_provider_for_plugins.h>
#line 12 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"

#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 8 "plugin.sip"
#include <qt_gui_cpp/plugin.h>
#line 19 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 7 "plugin_context.sip"
#include <qt_gui_cpp/plugin_context.h>
#line 22 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 25 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 7 "plugin_descriptor.sip"
#include <qt_gui_cpp/plugin_descriptor.h>
#line 28 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 31 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmap.sip"
#include <qmap.h>
#line 34 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 72 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 37 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 40 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 269 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 49 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 55 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 64 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 67 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 70 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"


class sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins : public qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins
{
public:
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(const QString&,const QString&);
    virtual ~sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const char*);
    void sipProtectVirt_disconnectNotify(bool,const char*);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void unload_plugin(qt_gui_cpp::Plugin*);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void shutdown();
    void unload(void*);
    qt_gui_cpp::Plugin* load_explicit_type(const QString&,qt_gui_cpp::PluginContext*);
    qt_gui_cpp::Plugin* load_plugin(const QString&,qt_gui_cpp::PluginContext*);
    void* load(const QString&,qt_gui_cpp::PluginContext*);
    QList<qt_gui_cpp::PluginDescriptor*> discover_descriptors(QObject*);
    QMap<QString,QString> discover(QObject*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins &);
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins &operator = (const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins &);

    char sipPyMethods[15];
};

sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(const QString& a0,const QString& a1): qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::~sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::metaObject() const
{
    return sip_libqt_gui_cpp_sip_qt_metaobject(sipPySelf,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins);
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_libqt_gui_cpp_sip_qt_metacall(sipPySelf,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,_c,_id,_a);

    return _id;
}

void *sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::qt_metacast(const char *_clname)
{
    return (sip_libqt_gui_cpp_sip_qt_metacast(sipPySelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, _clname)) ? this : qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::qt_metacast(_clname);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::unload_plugin(qt_gui_cpp::Plugin*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_unload_plugin);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::unload_plugin(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qt_gui_cpp::Plugin*);

    sipVH_libqt_gui_cpp_sip_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::shutdown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_shutdown);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::shutdown();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::unload(void*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_unload);

    if (!sipMeth)
    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::unload(a0);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, void*);

    sipVH_libqt_gui_cpp_sip_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qt_gui_cpp::Plugin* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::load_explicit_type(const QString& a0,qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_load_explicit_type);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load_explicit_type(a0,a1);

    extern qt_gui_cpp::Plugin* sipVH_libqt_gui_cpp_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qt_gui_cpp::Plugin* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::load_plugin(const QString& a0,qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_load_plugin);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load_plugin(a0,a1);

    extern qt_gui_cpp::Plugin* sipVH_libqt_gui_cpp_sip_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::load(const QString& a0,qt_gui_cpp::PluginContext*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_load);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load(a0,a1);

    extern void* sipVH_libqt_gui_cpp_sip_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_2(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QList<qt_gui_cpp::PluginDescriptor*> sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::discover_descriptors(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_discover_descriptors);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::discover_descriptors(a0);

    extern QList<qt_gui_cpp::PluginDescriptor*> sipVH_libqt_gui_cpp_sip_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_libqt_gui_cpp_sip_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMap<QString,QString> sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::discover(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_discover);

    if (!sipMeth)
        return qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::discover(a0);

    extern QMap<QString,QString> sipVH_libqt_gui_cpp_sip_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_libqt_gui_cpp_sip_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QObject* sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtect_sender() const
{
    return QObject::sender();
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp))
        {
            QObject*sipRes = 0;

#line 638 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (helper)
            sipRes = helper(sipRes);
#line 482 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 664 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        // PyQt5: Get rid of the const casts.
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(const_cast<QObject *>(sipCpp), a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 525 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppRosPluginlibPluginProvider_ForPlugins.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_create_instance(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_create_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::create_instance(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_create_instance, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QObject, &a0))
        {
            QMap<QString,QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QString>((sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::discover(a0) : sipCpp->discover(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_discover, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover_descriptors(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover_descriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QObject, &a0))
        {
            QList<qt_gui_cpp::PluginDescriptor*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<qt_gui_cpp::PluginDescriptor*>((sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::discover_descriptors(a0) : sipCpp->discover_descriptors(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101qt_gui_cpp_PluginDescriptor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_discover_descriptors, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        qt_gui_cpp::PluginContext* a1;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load(*a0,a1) : sipCpp->load(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        qt_gui_cpp::PluginContext* a1;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            qt_gui_cpp::Plugin*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load_plugin(*a0,a1) : sipCpp->load_plugin(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_load_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_explicit_type(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_explicit_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        qt_gui_cpp::PluginContext* a1;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, sipType_QString,&a0, &a0State, sipType_qt_gui_cpp_PluginContext, &a1))
        {
            qt_gui_cpp::Plugin*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::load_explicit_type(*a0,a1) : sipCpp->load_explicit_type(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_qt_gui_cpp_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_load_explicit_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_unload(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        void* a0;
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::unload(a0) : sipCpp->unload(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_unload, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_shutdown(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_shutdown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::shutdown() : sipCpp->shutdown());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RosPluginlibPluginProvider_ForPlugins, sipName_shutdown, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(void *, const sipTypeDef *);}
static void *cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_qt_gui_cpp_PluginProvider)->ctd_cast((qt_gui_cpp::PluginProvider *)(qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(void *, int);}
static void release_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(void *sipCppV,int)
{
    qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *sipCpp = reinterpret_cast<qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(sipSimpleWrapper *);}
static void dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipqt_gui_cpp_RosPluginlibPluginProvider_ForPlugins(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins[] = {{143, 0, 0}, {10, 255, 1}};


static PyMethodDef methods_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create_instance), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_create_instance, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_discover), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_discover_descriptors), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_discover_descriptors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load_explicit_type), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_explicit_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load_plugin), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_load_plugin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_shutdown), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_shutdown, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unload), meth_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins_unload, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_libqt_gui_cpp_sip_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_qt_gui_cpp__RosPluginlibPluginProvider_ForPlugins,
        {0}
    },
    {
        sipNameNr_RosPluginlibPluginProvider_ForPlugins,
        {3, 255, 0},
        16, methods_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
    0,
    init_type_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
    0,
    0,
    0,
    release_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
    cast_qt_gui_cpp_RosPluginlibPluginProvider_ForPlugins,
    0,
    0,
    0,
    0,
    0,
    0
},
    &qt_gui_cpp::RosPluginlibPluginProvider_ForPlugins::staticMetaObject,
    0,
    0
};

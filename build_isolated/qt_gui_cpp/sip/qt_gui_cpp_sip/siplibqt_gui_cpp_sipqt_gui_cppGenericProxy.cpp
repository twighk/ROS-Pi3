/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 7 "generic_proxy.sip"
#include <qt_gui_cpp/generic_proxy.h>
#line 12 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppGenericProxy.cpp"

#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 16 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppGenericProxy.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_qt_gui_cpp_GenericProxy(void *, const sipTypeDef *);}
static void *cast_qt_gui_cpp_GenericProxy(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_qt_gui_cpp_GenericProxy)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_qt_gui_cpp_GenericProxy(void *, int);}
static void release_qt_gui_cpp_GenericProxy(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<qt_gui_cpp::GenericProxy *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_qt_gui_cpp_GenericProxy(void *, SIP_SSIZE_T, const void *);}
static void assign_qt_gui_cpp_GenericProxy(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<qt_gui_cpp::GenericProxy *>(sipDst)[sipDstIdx] = *reinterpret_cast<const qt_gui_cpp::GenericProxy *>(sipSrc);
}


extern "C" {static void *array_qt_gui_cpp_GenericProxy(SIP_SSIZE_T);}
static void *array_qt_gui_cpp_GenericProxy(SIP_SSIZE_T sipNrElem)
{
    return new qt_gui_cpp::GenericProxy[sipNrElem];
}


extern "C" {static void *copy_qt_gui_cpp_GenericProxy(const void *, SIP_SSIZE_T);}
static void *copy_qt_gui_cpp_GenericProxy(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new qt_gui_cpp::GenericProxy(reinterpret_cast<const qt_gui_cpp::GenericProxy *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_qt_gui_cpp_GenericProxy(sipSimpleWrapper *);}
static void dealloc_qt_gui_cpp_GenericProxy(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_qt_gui_cpp_GenericProxy(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_qt_gui_cpp_GenericProxy(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_qt_gui_cpp_GenericProxy(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    qt_gui_cpp::GenericProxy *sipCpp = 0;

    {
        QObject* a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|J8", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new qt_gui_cpp::GenericProxy(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const qt_gui_cpp::GenericProxy* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_qt_gui_cpp_GenericProxy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new qt_gui_cpp::GenericProxy(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


pyqt4ClassTypeDef sipTypeDef_libqt_gui_cpp_sip_qt_gui_cpp_GenericProxy = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_qt_gui_cpp__GenericProxy,
        {0}
    },
    {
        sipNameNr_GenericProxy,
        {3, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_qt_gui_cpp_GenericProxy,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_qt_gui_cpp_GenericProxy,
    assign_qt_gui_cpp_GenericProxy,
    array_qt_gui_cpp_GenericProxy,
    copy_qt_gui_cpp_GenericProxy,
    release_qt_gui_cpp_GenericProxy,
    cast_qt_gui_cpp_GenericProxy,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibqt_gui_cpp_sip.h"

#line 8 "plugin_bridge.sip"
#include <qt_gui_cpp/plugin_bridge.h>
#line 12 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"

#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 16 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 7 "plugin_provider.sip"
#include <qt_gui_cpp/plugin_provider.h>
#line 19 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 31 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 22 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 7 "plugin_context.sip"
#include <qt_gui_cpp/plugin_context.h>
#line 25 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 269 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 37 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 40 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 43 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 52 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 30 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 55 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 58 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"


class sipqt_gui_cpp_PluginBridge : public qt_gui_cpp::PluginBridge
{
public:
    sipqt_gui_cpp_PluginBridge();
    virtual ~sipqt_gui_cpp_PluginBridge();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const char*);
    void sipProtectVirt_disconnectNotify(bool,const char*);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void restore_settings(QObject*,QObject*);
    void save_settings(QObject*,QObject*);
    void shutdown_plugin();
    void trigger_configuration();
    bool has_configuration() const;
    void unload_plugin();
    bool load_plugin(qt_gui_cpp::PluginProvider*,const QString&,qt_gui_cpp::PluginContext*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipqt_gui_cpp_PluginBridge(const sipqt_gui_cpp_PluginBridge &);
    sipqt_gui_cpp_PluginBridge &operator = (const sipqt_gui_cpp_PluginBridge &);

    char sipPyMethods[14];
};

sipqt_gui_cpp_PluginBridge::sipqt_gui_cpp_PluginBridge(): qt_gui_cpp::PluginBridge(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipqt_gui_cpp_PluginBridge::~sipqt_gui_cpp_PluginBridge()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipqt_gui_cpp_PluginBridge::metaObject() const
{
    return sip_libqt_gui_cpp_sip_qt_metaobject(sipPySelf,sipType_qt_gui_cpp_PluginBridge);
}

int sipqt_gui_cpp_PluginBridge::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = qt_gui_cpp::PluginBridge::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_libqt_gui_cpp_sip_qt_metacall(sipPySelf,sipType_qt_gui_cpp_PluginBridge,_c,_id,_a);

    return _id;
}

void *sipqt_gui_cpp_PluginBridge::qt_metacast(const char *_clname)
{
    return (sip_libqt_gui_cpp_sip_qt_metacast(sipPySelf, sipType_qt_gui_cpp_PluginBridge, _clname)) ? this : qt_gui_cpp::PluginBridge::qt_metacast(_clname);
}

void sipqt_gui_cpp_PluginBridge::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginBridge::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginBridge::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginBridge::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginBridge::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipqt_gui_cpp_PluginBridge::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return qt_gui_cpp::PluginBridge::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipqt_gui_cpp_PluginBridge::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return qt_gui_cpp::PluginBridge::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipqt_gui_cpp_PluginBridge::restore_settings(QObject*a0,QObject*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_restore_settings);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::restore_settings(a0,a1);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QObject*);

    sipVH_libqt_gui_cpp_sip_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipqt_gui_cpp_PluginBridge::save_settings(QObject*a0,QObject*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_save_settings);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::save_settings(a0,a1);
        return;
    }

    extern void sipVH_libqt_gui_cpp_sip_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QObject*);

    sipVH_libqt_gui_cpp_sip_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipqt_gui_cpp_PluginBridge::shutdown_plugin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_shutdown_plugin);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::shutdown_plugin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipqt_gui_cpp_PluginBridge::trigger_configuration()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_trigger_configuration);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::trigger_configuration();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipqt_gui_cpp_PluginBridge::has_configuration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_has_configuration);

    if (!sipMeth)
        return qt_gui_cpp::PluginBridge::has_configuration();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipqt_gui_cpp_PluginBridge::unload_plugin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_unload_plugin);

    if (!sipMeth)
    {
        qt_gui_cpp::PluginBridge::unload_plugin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_libqt_gui_cpp_sip_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipqt_gui_cpp_PluginBridge::load_plugin(qt_gui_cpp::PluginProvider*a0,const QString& a1,qt_gui_cpp::PluginContext*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_load_plugin);

    if (!sipMeth)
        return qt_gui_cpp::PluginBridge::load_plugin(a0,a1,a2);

    extern bool sipVH_libqt_gui_cpp_sip_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qt_gui_cpp::PluginProvider*,const QString&,qt_gui_cpp::PluginContext*);

    return sipVH_libqt_gui_cpp_sip_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipqt_gui_cpp_PluginBridge::sipProtect_sender() const
{
    return QObject::sender();
}

int sipqt_gui_cpp_PluginBridge::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipqt_gui_cpp_PluginBridge::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipqt_gui_cpp_PluginBridge::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipqt_gui_cpp_PluginBridge::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipqt_gui_cpp_PluginBridge::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipqt_gui_cpp_PluginBridge::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipqt_gui_cpp_PluginBridge::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            QObject*sipRes = 0;

#line 638 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (helper)
            sipRes = helper(sipRes);
#line 460 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        const sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 664 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        // PyQt5: Get rid of the const casts.
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(const_cast<QObject *>(sipCpp), a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 503 "/opt/ros_catkin_ws/build_isolated/qt_gui_cpp/sip/qt_gui_cpp_sip/siplibqt_gui_cpp_sipqt_gui_cppPluginBridge.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char* a0;
        sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BG", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipqt_gui_cpp_PluginBridge *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_load_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_load_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::PluginProvider* a0;
        const QString* a1;
        int a1State = 0;
        qt_gui_cpp::PluginContext* a2;
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1J8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_qt_gui_cpp_PluginProvider, &a0, sipType_QString,&a1, &a1State, sipType_qt_gui_cpp_PluginContext, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::load_plugin(a0,*a1,a2) : sipCpp->load_plugin(a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_load_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_unload_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_unload_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::unload_plugin() : sipCpp->unload_plugin());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_unload_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_has_configuration(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_has_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::has_configuration() : sipCpp->has_configuration());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_has_configuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_trigger_configuration(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_trigger_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::trigger_configuration() : sipCpp->trigger_configuration());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_trigger_configuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_shutdown_plugin(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_shutdown_plugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::shutdown_plugin() : sipCpp->shutdown_plugin());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_shutdown_plugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_save_settings(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_save_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QObject* a1;
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_QObject, &a0, sipType_QObject, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::save_settings(a0,a1) : sipCpp->save_settings(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_save_settings, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_qt_gui_cpp_PluginBridge_restore_settings(PyObject *, PyObject *);}
static PyObject *meth_qt_gui_cpp_PluginBridge_restore_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QObject* a1;
        qt_gui_cpp::PluginBridge *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_qt_gui_cpp_PluginBridge, &sipCpp, sipType_QObject, &a0, sipType_QObject, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->qt_gui_cpp::PluginBridge::restore_settings(a0,a1) : sipCpp->restore_settings(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginBridge, sipName_restore_settings, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_qt_gui_cpp_PluginBridge(void *, const sipTypeDef *);}
static void *cast_qt_gui_cpp_PluginBridge(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_qt_gui_cpp_PluginBridge)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(qt_gui_cpp::PluginBridge *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_qt_gui_cpp_PluginBridge(void *, int);}
static void release_qt_gui_cpp_PluginBridge(void *sipCppV,int)
{
    qt_gui_cpp::PluginBridge *sipCpp = reinterpret_cast<qt_gui_cpp::PluginBridge *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_qt_gui_cpp_PluginBridge(sipSimpleWrapper *);}
static void dealloc_qt_gui_cpp_PluginBridge(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipqt_gui_cpp_PluginBridge *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_qt_gui_cpp_PluginBridge(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_qt_gui_cpp_PluginBridge(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_qt_gui_cpp_PluginBridge(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipqt_gui_cpp_PluginBridge *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipqt_gui_cpp_PluginBridge();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_qt_gui_cpp_PluginBridge[] = {{143, 0, 1}};


static PyMethodDef methods_qt_gui_cpp_PluginBridge[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_qt_gui_cpp_PluginBridge_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_qt_gui_cpp_PluginBridge_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_qt_gui_cpp_PluginBridge_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_qt_gui_cpp_PluginBridge_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_has_configuration), meth_qt_gui_cpp_PluginBridge_has_configuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load_plugin), meth_qt_gui_cpp_PluginBridge_load_plugin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_qt_gui_cpp_PluginBridge_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_restore_settings), meth_qt_gui_cpp_PluginBridge_restore_settings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save_settings), meth_qt_gui_cpp_PluginBridge_save_settings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_qt_gui_cpp_PluginBridge_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_qt_gui_cpp_PluginBridge_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_shutdown_plugin), meth_qt_gui_cpp_PluginBridge_shutdown_plugin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_qt_gui_cpp_PluginBridge_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_trigger_configuration), meth_qt_gui_cpp_PluginBridge_trigger_configuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unload_plugin), meth_qt_gui_cpp_PluginBridge_unload_plugin, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_libqt_gui_cpp_sip_qt_gui_cpp_PluginBridge = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_qt_gui_cpp__PluginBridge,
        {0}
    },
    {
        sipNameNr_PluginBridge,
        {3, 255, 0},
        15, methods_qt_gui_cpp_PluginBridge,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_qt_gui_cpp_PluginBridge,
    0,
    init_type_qt_gui_cpp_PluginBridge,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_qt_gui_cpp_PluginBridge,
    0,
    0,
    0,
    release_qt_gui_cpp_PluginBridge,
    cast_qt_gui_cpp_PluginBridge,
    0,
    0,
    0,
    0,
    0,
    0
},
    &qt_gui_cpp::PluginBridge::staticMetaObject,
    0,
    0
};

/*
 * Module code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIPyKDL.h"

#line 100 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 13 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

#line 102 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 20 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 26 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 30 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 44 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 34 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 207 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 38 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 44 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"


PyDoc_STRVAR(doc_RotationVel_value, "RotationVel.value() -> Rotation");

extern "C" {static PyObject *meth_RotationVel_value(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            Rotation*sipRes;

            sipRes = new Rotation(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_value, doc_RotationVel_value);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_deriv, "RotationVel.deriv() -> Vector");

extern "C" {static PyObject *meth_RotationVel_deriv(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_deriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->deriv());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_deriv, doc_RotationVel_deriv);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_UnitX, "RotationVel.UnitX() -> VectorVel");

extern "C" {static PyObject *meth_RotationVel_UnitX(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_UnitX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(sipCpp->UnitX());

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_UnitX, doc_RotationVel_UnitX);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_UnitY, "RotationVel.UnitY() -> VectorVel");

extern "C" {static PyObject *meth_RotationVel_UnitY(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_UnitY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(sipCpp->UnitY());

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_UnitY, doc_RotationVel_UnitY);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_UnitZ, "RotationVel.UnitZ() -> VectorVel");

extern "C" {static PyObject *meth_RotationVel_UnitZ(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_UnitZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(sipCpp->UnitZ());

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_UnitZ, doc_RotationVel_UnitZ);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_Identity, "RotationVel.Identity() -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_Identity(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::Identity());

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_Identity, doc_RotationVel_Identity);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_Inverse, "RotationVel.Inverse() -> RotationVel\n"
    "RotationVel.Inverse(VectorVel) -> VectorVel\n"
    "RotationVel.Inverse(Vector) -> VectorVel\n"
    "RotationVel.Inverse(TwistVel) -> TwistVel\n"
    "RotationVel.Inverse(Twist) -> TwistVel");

extern "C" {static PyObject *meth_RotationVel_Inverse(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_Inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RotationVel, &sipCpp))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_VectorVel, &a0))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const Vector* a0;
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_Vector, &a0))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const TwistVel* a0;
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_TwistVel, &a0))
        {
            TwistVel*sipRes;

            sipRes = new TwistVel(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_TwistVel,NULL);
        }
    }

    {
        const Twist* a0;
        const RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_Twist, &a0))
        {
            TwistVel*sipRes;

            sipRes = new TwistVel(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_TwistVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_Inverse, doc_RotationVel_Inverse);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_DoRotX, "RotationVel.DoRotX(doubleVel)");

extern "C" {static PyObject *meth_RotationVel_DoRotX(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_DoRotX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;
        RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_doubleVel, &a0))
        {
            sipCpp->DoRotX(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_DoRotX, doc_RotationVel_DoRotX);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_DoRotY, "RotationVel.DoRotY(doubleVel)");

extern "C" {static PyObject *meth_RotationVel_DoRotY(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_DoRotY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;
        RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_doubleVel, &a0))
        {
            sipCpp->DoRotY(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_DoRotY, doc_RotationVel_DoRotY);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_DoRotZ, "RotationVel.DoRotZ(doubleVel)");

extern "C" {static PyObject *meth_RotationVel_DoRotZ(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_DoRotZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;
        RotationVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_RotationVel, &sipCpp, sipType_doubleVel, &a0))
        {
            sipCpp->DoRotZ(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_DoRotZ, doc_RotationVel_DoRotZ);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_RotX, "RotationVel.RotX(doubleVel) -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_RotX(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_RotX(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_doubleVel, &a0))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::RotX(*a0));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_RotX, doc_RotationVel_RotX);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_RotY, "RotationVel.RotY(doubleVel) -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_RotY(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_RotY(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_doubleVel, &a0))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::RotY(*a0));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_RotY, doc_RotationVel_RotY);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_RotZ, "RotationVel.RotZ(doubleVel) -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_RotZ(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_RotZ(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_doubleVel, &a0))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::RotZ(*a0));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_RotZ, doc_RotationVel_RotZ);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_Rot, "RotationVel.Rot(Vector, doubleVel) -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_Rot(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_Rot(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        const doubleVel* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_Vector, &a0, sipType_doubleVel, &a1))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::Rot(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_Rot, doc_RotationVel_Rot);

    return NULL;
}


PyDoc_STRVAR(doc_RotationVel_Rot2, "RotationVel.Rot2(Vector, doubleVel) -> RotationVel");

extern "C" {static PyObject *meth_RotationVel_Rot2(PyObject *, PyObject *);}
static PyObject *meth_RotationVel_Rot2(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        const doubleVel* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_Vector, &a0, sipType_doubleVel, &a1))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel(RotationVel::Rot2(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RotationVel, sipName_Rot2, doc_RotationVel_Rot2);

    return NULL;
}


extern "C" {static PyObject *slot_RotationVel___mul__(PyObject *,PyObject *);}
static PyObject *slot_RotationVel___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        RotationVel* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        RotationVel* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_Vector, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        RotationVel* a0;
        const TwistVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_TwistVel, &a1))
        {
            TwistVel*sipRes;

            sipRes = new TwistVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_TwistVel,NULL);
        }
    }

    {
        RotationVel* a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_Twist, &a1))
        {
            TwistVel*sipRes;

            sipRes = new TwistVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_TwistVel,NULL);
        }
    }

    {
        const RotationVel* a0;
        const RotationVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_RotationVel, &a1))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    {
        const RotationVel* a0;
        const Rotation* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_RotationVel, &a0, sipType_Rotation, &a1))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_RotationVel(void *, const sipTypeDef *);}
static void *cast_RotationVel(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_RotationVel)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_RotationVel(void *, int);}
static void release_RotationVel(void *sipCppV,int)
{
    delete reinterpret_cast<RotationVel *>(sipCppV);
}


extern "C" {static PyObject *pickle_RotationVel(void *);}
static PyObject *pickle_RotationVel(void *sipCppV)
{
    RotationVel *sipCpp = reinterpret_cast<RotationVel *>(sipCppV);
    PyObject *sipRes;

#line 139 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    const sipTypeDef *rotation_type = sipFindType("Rotation");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->R), rotation_type, Py_None),
                                 sipConvertFromType(&(sipCpp->w), vector_type, Py_None));
#line 640 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

    return sipRes;
}


extern "C" {static void assign_RotationVel(void *, SIP_SSIZE_T, const void *);}
static void assign_RotationVel(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<RotationVel *>(sipDst)[sipDstIdx] = *reinterpret_cast<const RotationVel *>(sipSrc);
}


extern "C" {static void *array_RotationVel(SIP_SSIZE_T);}
static void *array_RotationVel(SIP_SSIZE_T sipNrElem)
{
    return new RotationVel[sipNrElem];
}


extern "C" {static void *copy_RotationVel(const void *, SIP_SSIZE_T);}
static void *copy_RotationVel(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new RotationVel(reinterpret_cast<const RotationVel *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_RotationVel(sipSimpleWrapper *);}
static void dealloc_RotationVel(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_RotationVel(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_RotationVel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_RotationVel(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    RotationVel *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new RotationVel();

            return sipCpp;
        }
    }

    {
        const Rotation* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new RotationVel(*a0);

            return sipCpp;
        }
    }

    {
        const Rotation* a0;
        const Vector* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
            sipCpp = new RotationVel(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const RotationVel* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_RotationVel, &a0))
        {
            sipCpp = new RotationVel(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_RotationVel[] = {
    {(void *)slot_RotationVel___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_RotationVel[] = {
    {SIP_MLNAME_CAST(sipName_DoRotX), meth_RotationVel_DoRotX, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_DoRotX)},
    {SIP_MLNAME_CAST(sipName_DoRotY), meth_RotationVel_DoRotY, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_DoRotY)},
    {SIP_MLNAME_CAST(sipName_DoRotZ), meth_RotationVel_DoRotZ, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_DoRotZ)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_RotationVel_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_Identity)},
    {SIP_MLNAME_CAST(sipName_Inverse), meth_RotationVel_Inverse, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_Inverse)},
    {SIP_MLNAME_CAST(sipName_Rot), meth_RotationVel_Rot, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_Rot)},
    {SIP_MLNAME_CAST(sipName_Rot2), meth_RotationVel_Rot2, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_Rot2)},
    {SIP_MLNAME_CAST(sipName_RotX), meth_RotationVel_RotX, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_RotX)},
    {SIP_MLNAME_CAST(sipName_RotY), meth_RotationVel_RotY, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_RotY)},
    {SIP_MLNAME_CAST(sipName_RotZ), meth_RotationVel_RotZ, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_RotZ)},
    {SIP_MLNAME_CAST(sipName_UnitX), meth_RotationVel_UnitX, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_UnitX)},
    {SIP_MLNAME_CAST(sipName_UnitY), meth_RotationVel_UnitY, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_UnitY)},
    {SIP_MLNAME_CAST(sipName_UnitZ), meth_RotationVel_UnitZ, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_UnitZ)},
    {SIP_MLNAME_CAST(sipName_deriv), meth_RotationVel_deriv, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_deriv)},
    {SIP_MLNAME_CAST(sipName_value), meth_RotationVel_value, METH_VARARGS, SIP_MLDOC_CAST(doc_RotationVel_value)}
};


extern "C" {static PyObject *varget_RotationVel_R(void *, PyObject *, PyObject *);}
static PyObject *varget_RotationVel_R(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Rotation*sipVal;
    RotationVel *sipCpp = reinterpret_cast<RotationVel *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -5);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->R;

    sipPy = sipConvertFromType(sipVal, sipType_Rotation, NULL);
    sipKeepReference(sipPySelf, -5, sipPy);

    return sipPy;
}


extern "C" {static int varset_RotationVel_R(void *, PyObject *, PyObject *);}
static int varset_RotationVel_R(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Rotation*sipVal;
    RotationVel *sipCpp = reinterpret_cast<RotationVel *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Rotation *>(sipForceConvertToType(sipPy,sipType_Rotation,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->R = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_RotationVel_w(void *, PyObject *, PyObject *);}
static PyObject *varget_RotationVel_w(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    RotationVel *sipCpp = reinterpret_cast<RotationVel *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -6);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->w;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -6, sipPy);

    return sipPy;
}


extern "C" {static int varset_RotationVel_w(void *, PyObject *, PyObject *);}
static int varset_RotationVel_w(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    RotationVel *sipCpp = reinterpret_cast<RotationVel *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->w = *sipVal;

    return 0;
}

sipVariableDef variables_RotationVel[] = {
    {InstanceVariable, sipName_R, (PyMethodDef *)varget_RotationVel_R, (PyMethodDef *)varset_RotationVel_R, NULL, NULL},
    {InstanceVariable, sipName_w, (PyMethodDef *)varget_RotationVel_w, (PyMethodDef *)varset_RotationVel_w, NULL, NULL},
};

PyDoc_STRVAR(doc_RotationVel, "\1RotationVel()\n"
    "RotationVel(Rotation)\n"
    "RotationVel(Rotation, Vector)\n"
    "RotationVel(RotationVel)");


sipClassTypeDef sipTypeDef_PyKDL_RotationVel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_RotationVel,
        {0}
    },
    {
        sipNameNr_RotationVel,
        {0, 0, 1},
        15, methods_RotationVel,
        0, 0,
        2, variables_RotationVel,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_RotationVel,
    -1,
    -1,
    0,
    slots_RotationVel,
    init_type_RotationVel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_RotationVel,
    assign_RotationVel,
    array_RotationVel,
    copy_RotationVel,
    release_RotationVel,
    cast_RotationVel,
    0,
    0,
    0,
    pickle_RotationVel,
    0,
    0
};

#line 44 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 895 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 902 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 906 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"


PyDoc_STRVAR(doc_VectorVel_value, "VectorVel.value() -> Vector");

extern "C" {static PyObject *meth_VectorVel_value(PyObject *, PyObject *);}
static PyObject *meth_VectorVel_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_VectorVel, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorVel, sipName_value, doc_VectorVel_value);

    return NULL;
}


PyDoc_STRVAR(doc_VectorVel_deriv, "VectorVel.deriv() -> Vector");

extern "C" {static PyObject *meth_VectorVel_deriv(PyObject *, PyObject *);}
static PyObject *meth_VectorVel_deriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_VectorVel, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->deriv());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorVel, sipName_deriv, doc_VectorVel_deriv);

    return NULL;
}


PyDoc_STRVAR(doc_VectorVel_Zero, "VectorVel.Zero() -> VectorVel");

extern "C" {static PyObject *meth_VectorVel_Zero(PyObject *, PyObject *);}
static PyObject *meth_VectorVel_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(VectorVel::Zero());

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorVel, sipName_Zero, doc_VectorVel_Zero);

    return NULL;
}


PyDoc_STRVAR(doc_VectorVel_ReverseSign, "VectorVel.ReverseSign()");

extern "C" {static PyObject *meth_VectorVel_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_VectorVel_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        VectorVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_VectorVel, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorVel, sipName_ReverseSign, doc_VectorVel_ReverseSign);

    return NULL;
}


PyDoc_STRVAR(doc_VectorVel_Norm, "VectorVel.Norm() -> doubleVel");

extern "C" {static PyObject *meth_VectorVel_Norm(PyObject *, PyObject *);}
static PyObject *meth_VectorVel_Norm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_VectorVel, &sipCpp))
        {
            doubleVel*sipRes;

            sipRes = new doubleVel(sipCpp->Norm());

            return sipConvertFromNewType(sipRes,sipType_doubleVel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VectorVel, sipName_Norm, doc_VectorVel_Norm);

    return NULL;
}


extern "C" {static PyObject *slot_VectorVel___neg__(PyObject *);}
static PyObject *slot_VectorVel___neg__(PyObject *sipSelf)
{
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_VectorVel));

    if (!sipCpp)
        return 0;


    {
        {
            VectorVel*sipRes;

            sipRes = new VectorVel(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_VectorVel___mul__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_Vector, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_VectorVel, &a0, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        double a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const doubleVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_doubleVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_VectorVel___div__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_VectorVel, &a0, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const doubleVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_doubleVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_VectorVel___add__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_Vector, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_VectorVel___sub__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const VectorVel* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_VectorVel, &a0, sipType_Vector, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_VectorVel___isub__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_VectorVel)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_VectorVel));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_VectorVel, &a0))
        {
            sipCpp->VectorVel::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_VectorVel___iadd__(PyObject *,PyObject *);}
static PyObject *slot_VectorVel___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_VectorVel)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_VectorVel));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const VectorVel* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_VectorVel, &a0))
        {
            sipCpp->VectorVel::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_VectorVel(void *, const sipTypeDef *);}
static void *cast_VectorVel(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_VectorVel)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_VectorVel(void *, int);}
static void release_VectorVel(void *sipCppV,int)
{
    delete reinterpret_cast<VectorVel *>(sipCppV);
}


extern "C" {static PyObject *pickle_VectorVel(void *);}
static PyObject *pickle_VectorVel(void *sipCppV)
{
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipCppV);
    PyObject *sipRes;

#line 64 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->p), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->v), vector_type, Py_None));
#line 1383 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

    return sipRes;
}


extern "C" {static void assign_VectorVel(void *, SIP_SSIZE_T, const void *);}
static void assign_VectorVel(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<VectorVel *>(sipDst)[sipDstIdx] = *reinterpret_cast<const VectorVel *>(sipSrc);
}


extern "C" {static void *array_VectorVel(SIP_SSIZE_T);}
static void *array_VectorVel(SIP_SSIZE_T sipNrElem)
{
    return new VectorVel[sipNrElem];
}


extern "C" {static void *copy_VectorVel(const void *, SIP_SSIZE_T);}
static void *copy_VectorVel(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new VectorVel(reinterpret_cast<const VectorVel *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_VectorVel(sipSimpleWrapper *);}
static void dealloc_VectorVel(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_VectorVel(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_VectorVel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_VectorVel(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    VectorVel *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new VectorVel();

            return sipCpp;
        }
    }

    {
        const Vector* a0;
        const Vector* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new VectorVel(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const Vector* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Vector, &a0))
        {
            sipCpp = new VectorVel(*a0);

            return sipCpp;
        }
    }

    {
        const VectorVel* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_VectorVel, &a0))
        {
            sipCpp = new VectorVel(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_VectorVel[] = {
    {(void *)slot_VectorVel___neg__, neg_slot},
    {(void *)slot_VectorVel___mul__, mul_slot},
    {(void *)slot_VectorVel___div__, div_slot},
    {(void *)slot_VectorVel___add__, add_slot},
    {(void *)slot_VectorVel___sub__, sub_slot},
    {(void *)slot_VectorVel___isub__, isub_slot},
    {(void *)slot_VectorVel___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_VectorVel[] = {
    {SIP_MLNAME_CAST(sipName_Norm), meth_VectorVel_Norm, METH_VARARGS, SIP_MLDOC_CAST(doc_VectorVel_Norm)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_VectorVel_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_VectorVel_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_VectorVel_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_VectorVel_Zero)},
    {SIP_MLNAME_CAST(sipName_deriv), meth_VectorVel_deriv, METH_VARARGS, SIP_MLDOC_CAST(doc_VectorVel_deriv)},
    {SIP_MLNAME_CAST(sipName_value), meth_VectorVel_value, METH_VARARGS, SIP_MLDOC_CAST(doc_VectorVel_value)}
};


extern "C" {static PyObject *varget_VectorVel_p(void *, PyObject *, PyObject *);}
static PyObject *varget_VectorVel_p(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -7);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->p;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -7, sipPy);

    return sipPy;
}


extern "C" {static int varset_VectorVel_p(void *, PyObject *, PyObject *);}
static int varset_VectorVel_p(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->p = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_VectorVel_v(void *, PyObject *, PyObject *);}
static PyObject *varget_VectorVel_v(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -8);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->v;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -8, sipPy);

    return sipPy;
}


extern "C" {static int varset_VectorVel_v(void *, PyObject *, PyObject *);}
static int varset_VectorVel_v(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    VectorVel *sipCpp = reinterpret_cast<VectorVel *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->v = *sipVal;

    return 0;
}

sipVariableDef variables_VectorVel[] = {
    {InstanceVariable, sipName_p, (PyMethodDef *)varget_VectorVel_p, (PyMethodDef *)varset_VectorVel_p, NULL, NULL},
    {InstanceVariable, sipName_v, (PyMethodDef *)varget_VectorVel_v, (PyMethodDef *)varset_VectorVel_v, NULL, NULL},
};

PyDoc_STRVAR(doc_VectorVel, "\1VectorVel()\n"
    "VectorVel(Vector, Vector)\n"
    "VectorVel(Vector)\n"
    "VectorVel(VectorVel)");


sipClassTypeDef sipTypeDef_PyKDL_VectorVel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_VectorVel,
        {0}
    },
    {
        sipNameNr_VectorVel,
        {0, 0, 1},
        5, methods_VectorVel,
        0, 0,
        2, variables_VectorVel,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_VectorVel,
    -1,
    -1,
    0,
    slots_VectorVel,
    init_type_VectorVel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_VectorVel,
    assign_VectorVel,
    array_VectorVel,
    copy_VectorVel,
    release_VectorVel,
    cast_VectorVel,
    0,
    0,
    0,
    pickle_VectorVel,
    0,
    0
};

#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 1634 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

#line 44 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 1639 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 207 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 1643 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"


extern "C" {static PyObject *slot_doubleVel___mul__(PyObject *,PyObject *);}
static PyObject *slot_doubleVel___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const doubleVel* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_doubleVel, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const doubleVel* a0;
        const TwistVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_doubleVel, &a0, sipType_TwistVel, &a1))
        {
            TwistVel*sipRes;

            sipRes = new TwistVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_TwistVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_doubleVel(void *, const sipTypeDef *);}
static void *cast_doubleVel(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_doubleVel)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_doubleVel(void *, int);}
static void release_doubleVel(void *sipCppV,int)
{
    delete reinterpret_cast<doubleVel *>(sipCppV);
}


extern "C" {static void assign_doubleVel(void *, SIP_SSIZE_T, const void *);}
static void assign_doubleVel(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<doubleVel *>(sipDst)[sipDstIdx] = *reinterpret_cast<const doubleVel *>(sipSrc);
}


extern "C" {static void *array_doubleVel(SIP_SSIZE_T);}
static void *array_doubleVel(SIP_SSIZE_T sipNrElem)
{
    return new doubleVel[sipNrElem];
}


extern "C" {static void *copy_doubleVel(const void *, SIP_SSIZE_T);}
static void *copy_doubleVel(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new doubleVel(reinterpret_cast<const doubleVel *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_doubleVel(sipSimpleWrapper *);}
static void dealloc_doubleVel(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_doubleVel(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_doubleVel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_doubleVel(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    doubleVel *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new doubleVel();

            return sipCpp;
        }
    }

    {
        const doubleVel* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_doubleVel, &a0))
        {
            sipCpp = new doubleVel(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_doubleVel[] = {
    {(void *)slot_doubleVel___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_doubleVel_grad(void *, PyObject *, PyObject *);}
static PyObject *varget_doubleVel_grad(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
    doubleVel *sipCpp = reinterpret_cast<doubleVel *>(sipSelf);

    sipVal = sipCpp->grad;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_doubleVel_grad(void *, PyObject *, PyObject *);}
static int varset_doubleVel_grad(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    doubleVel *sipCpp = reinterpret_cast<doubleVel *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->grad = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_doubleVel_t(void *, PyObject *, PyObject *);}
static PyObject *varget_doubleVel_t(void *sipSelf, PyObject *, PyObject *)
{
    double sipVal;
    doubleVel *sipCpp = reinterpret_cast<doubleVel *>(sipSelf);

    sipVal = sipCpp->t;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_doubleVel_t(void *, PyObject *, PyObject *);}
static int varset_doubleVel_t(void *sipSelf, PyObject *sipPy, PyObject *)
{
    double sipVal;
    doubleVel *sipCpp = reinterpret_cast<doubleVel *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->t = sipVal;

    return 0;
}

sipVariableDef variables_doubleVel[] = {
    {InstanceVariable, sipName_grad, (PyMethodDef *)varget_doubleVel_grad, (PyMethodDef *)varset_doubleVel_grad, NULL, NULL},
    {InstanceVariable, sipName_t, (PyMethodDef *)varget_doubleVel_t, (PyMethodDef *)varset_doubleVel_t, NULL, NULL},
};

PyDoc_STRVAR(doc_doubleVel, "\1doubleVel()\n"
    "doubleVel(doubleVel)");


sipClassTypeDef sipTypeDef_PyKDL_doubleVel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_doubleVel,
        {0}
    },
    {
        sipNameNr_doubleVel,
        {0, 0, 1},
        0, 0,
        0, 0,
        2, variables_doubleVel,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_doubleVel,
    -1,
    -1,
    0,
    slots_doubleVel,
    init_type_doubleVel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_doubleVel,
    assign_doubleVel,
    array_doubleVel,
    copy_doubleVel,
    release_doubleVel,
    cast_doubleVel,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 536 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/chainjnttojacsolver.hpp>
using namespace KDL;
#line 1892 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

#line 133 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/chain.hpp>
using namespace KDL;
#line 1897 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 172 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/jntarray.hpp>
using namespace KDL;
#line 1901 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 253 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/jntarray.hpp>
using namespace KDL;
#line 1905 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"


PyDoc_STRVAR(doc_ChainJntToJacSolver_JntToJac, "ChainJntToJacSolver.JntToJac(JntArray, Jacobian) -> int");

extern "C" {static PyObject *meth_ChainJntToJacSolver_JntToJac(PyObject *, PyObject *);}
static PyObject *meth_ChainJntToJacSolver_JntToJac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const JntArray* a0;
        Jacobian* a1;
        ChainJntToJacSolver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_ChainJntToJacSolver, &sipCpp, sipType_JntArray, &a0, sipType_Jacobian, &a1))
        {
            int sipRes;

            sipRes = sipCpp->JntToJac(*a0,*a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ChainJntToJacSolver, sipName_JntToJac, doc_ChainJntToJacSolver_JntToJac);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_ChainJntToJacSolver(void *, const sipTypeDef *);}
static void *cast_ChainJntToJacSolver(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_ChainJntToJacSolver)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_ChainJntToJacSolver(void *, int);}
static void release_ChainJntToJacSolver(void *sipCppV,int)
{
    delete reinterpret_cast<ChainJntToJacSolver *>(sipCppV);
}


extern "C" {static void dealloc_ChainJntToJacSolver(sipSimpleWrapper *);}
static void dealloc_ChainJntToJacSolver(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_ChainJntToJacSolver(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_ChainJntToJacSolver(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_ChainJntToJacSolver(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    ChainJntToJacSolver *sipCpp = 0;

    {
        const Chain* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Chain, &a0))
        {
            sipCpp = new ChainJntToJacSolver(*a0);

            return sipCpp;
        }
    }

    {
        const ChainJntToJacSolver* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_ChainJntToJacSolver, &a0))
        {
            sipCpp = new ChainJntToJacSolver(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_ChainJntToJacSolver[] = {
    {SIP_MLNAME_CAST(sipName_JntToJac), meth_ChainJntToJacSolver_JntToJac, METH_VARARGS, SIP_MLDOC_CAST(doc_ChainJntToJacSolver_JntToJac)}
};

PyDoc_STRVAR(doc_ChainJntToJacSolver, "\1ChainJntToJacSolver(Chain)\n"
    "ChainJntToJacSolver(ChainJntToJacSolver)");


sipClassTypeDef sipTypeDef_PyKDL_ChainJntToJacSolver = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_ChainJntToJacSolver,
        {0}
    },
    {
        sipNameNr_ChainJntToJacSolver,
        {0, 0, 1},
        1, methods_ChainJntToJacSolver,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_ChainJntToJacSolver,
    -1,
    -1,
    0,
    0,
    init_type_ChainJntToJacSolver,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_ChainJntToJacSolver,
    0,
    0,
    0,
    release_ChainJntToJacSolver,
    cast_ChainJntToJacSolver,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 521 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/chainiksolvervel_pinv_givens.hpp>
using namespace KDL;
#line 2057 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"

#line 133 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/chain.hpp>
using namespace KDL;
#line 2062 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 172 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/jntarray.hpp>
using namespace KDL;
#line 2066 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"
#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2072 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart1.cpp"


class sipChainIkSolverVel_pinv_givens : public ChainIkSolverVel_pinv_givens
{
public:
    sipChainIkSolverVel_pinv_givens(const Chain&);
    sipChainIkSolverVel_pinv_givens(const ChainIkSolverVel_pinv_givens&);
    virtual ~sipChainIkSolverVel_pinv_givens();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int CartToJnt(const JntArray&,const Twist&,JntArray&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipChainIkSolverVel_pinv_givens(const sipChainIkSolverVel_pinv_givens &);
    sipChainIkSolverVel_pinv_givens &operator = (const sipChainIkSolverVel_pinv_givens &);

    char sipPyMethods[1];
};

sipChainIkSolverVel_pinv_givens::sipChainIkSolverVel_pinv_givens(const Chain& a0): ChainIkSolverVel_pinv_givens(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipChainIkSolverVel_pinv_givens::sipChainIkSolverVel_pinv_givens(const ChainIkSolverVel_pinv_givens& a0): ChainIkSolverVel_pinv_givens(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipChainIkSolverVel_pinv_givens::~sipChainIkSolverVel_pinv_givens()
{
    sipCommonDtor(sipPySelf);
}

int sipChainIkSolverVel_pinv_givens::CartToJnt(const JntArray& a0,const Twist& a1,JntArray& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_CartToJnt);

    if (!sipMeth)
        return ChainIkSolverVel_pinv_givens::CartToJnt(a0,a1,a2);

    extern int sipVH_PyKDL_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const JntArray&,const Twist&,JntArray&);

    return sipVH_PyKDL_0(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_ChainIkSolverVel_pinv_givens_CartToJnt, "ChainIkSolverVel_pinv_givens.CartToJnt(JntArray, Twist, JntArray) -> int");

extern "C" {static PyObject *meth_ChainIkSolverVel_pinv_givens_CartToJnt(PyObject *, PyObject *);}
static PyObject *meth_ChainIkSolverVel_pinv_givens_CartToJnt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const JntArray* a0;
        const Twist* a1;
        JntArray* a2;
        ChainIkSolverVel_pinv_givens *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_ChainIkSolverVel_pinv_givens, &sipCpp, sipType_JntArray, &a0, sipType_Twist, &a1, sipType_JntArray, &a2))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->ChainIkSolverVel_pinv_givens::CartToJnt(*a0,*a1,*a2) : sipCpp->CartToJnt(*a0,*a1,*a2));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ChainIkSolverVel_pinv_givens, sipName_CartToJnt, doc_ChainIkSolverVel_pinv_givens_CartToJnt);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_ChainIkSolverVel_pinv_givens(void *, const sipTypeDef *);}
static void *cast_ChainIkSolverVel_pinv_givens(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_ChainIkSolverVel_pinv_givens)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_ChainIkSolverVel)->ctd_cast((ChainIkSolverVel *)(ChainIkSolverVel_pinv_givens *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_ChainIkSolverVel_pinv_givens(void *, int);}
static void release_ChainIkSolverVel_pinv_givens(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipChainIkSolverVel_pinv_givens *>(sipCppV);
    else
        delete reinterpret_cast<ChainIkSolverVel_pinv_givens *>(sipCppV);
}


extern "C" {static void dealloc_ChainIkSolverVel_pinv_givens(sipSimpleWrapper *);}
static void dealloc_ChainIkSolverVel_pinv_givens(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipChainIkSolverVel_pinv_givens *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_ChainIkSolverVel_pinv_givens(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_ChainIkSolverVel_pinv_givens(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_ChainIkSolverVel_pinv_givens(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipChainIkSolverVel_pinv_givens *sipCpp = 0;

    {
        const Chain* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Chain, &a0))
        {
            sipCpp = new sipChainIkSolverVel_pinv_givens(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const ChainIkSolverVel_pinv_givens* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_ChainIkSolverVel_pinv_givens, &a0))
        {
            sipCpp = new sipChainIkSolverVel_pinv_givens(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_ChainIkSolverVel_pinv_givens[] = {{10, 255, 1}};


static PyMethodDef methods_ChainIkSolverVel_pinv_givens[] = {
    {SIP_MLNAME_CAST(sipName_CartToJnt), meth_ChainIkSolverVel_pinv_givens_CartToJnt, METH_VARARGS, SIP_MLDOC_CAST(doc_ChainIkSolverVel_pinv_givens_CartToJnt)}
};

PyDoc_STRVAR(doc_ChainIkSolverVel_pinv_givens, "\1ChainIkSolverVel_pinv_givens(Chain)\n"
    "ChainIkSolverVel_pinv_givens(ChainIkSolverVel_pinv_givens)");


sipClassTypeDef sipTypeDef_PyKDL_ChainIkSolverVel_pinv_givens = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_ChainIkSolverVel_pinv_givens,
        {0}
    },
    {
        sipNameNr_ChainIkSolverVel_pinv_givens,
        {0, 0, 1},
        1, methods_ChainIkSolverVel_pinv_givens,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_ChainIkSolverVel_pinv_givens,
    -1,
    -1,
    supers_ChainIkSolverVel_pinv_givens,
    0,
    init_type_ChainIkSolverVel_pinv_givens,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_ChainIkSolverVel_pinv_givens,
    0,
    0,
    0,
    release_ChainIkSolverVel_pinv_givens,
    cast_ChainIkSolverVel_pinv_givens,
    0,
    0,
    0,
    0,
    0,
    0
};

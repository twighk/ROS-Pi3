/*
 * Module code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIPyKDL.h"

#line 25 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/joint.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 14 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

#line 21 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 18 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 24 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 30 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 201 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 36 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Joint_pose, "Joint.pose(float) -> Frame");

extern "C" {static PyObject *meth_Joint_pose(PyObject *, PyObject *);}
static PyObject *meth_Joint_pose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Joint, &sipCpp, &a0))
        {
            Frame*sipRes;

            sipRes = new Frame(sipCpp->pose(a0));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_pose, doc_Joint_pose);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_twist, "Joint.twist(float) -> Twist");

extern "C" {static PyObject *meth_Joint_twist(PyObject *, PyObject *);}
static PyObject *meth_Joint_twist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Joint, &sipCpp, &a0))
        {
            Twist*sipRes;

            sipRes = new Twist(sipCpp->twist(a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_twist, doc_Joint_twist);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_JointAxis, "Joint.JointAxis() -> Vector");

extern "C" {static PyObject *meth_Joint_JointAxis(PyObject *, PyObject *);}
static PyObject *meth_Joint_JointAxis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->JointAxis());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_JointAxis, doc_Joint_JointAxis);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_JointOrigin, "Joint.JointOrigin() -> Vector");

extern "C" {static PyObject *meth_Joint_JointOrigin(PyObject *, PyObject *);}
static PyObject *meth_Joint_JointOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->JointOrigin());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_JointOrigin, doc_Joint_JointOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getName, "Joint.getName() -> string");

extern "C" {static PyObject *meth_Joint_getName(PyObject *, PyObject *);}
static PyObject *meth_Joint_getName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->getName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getName, doc_Joint_getName);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getType, "Joint.getType() -> Joint.JointType");

extern "C" {static PyObject *meth_Joint_getType(PyObject *, PyObject *);}
static PyObject *meth_Joint_getType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
            Joint::JointType sipRes;

            sipRes = sipCpp->getType();

            return sipConvertFromEnum(sipRes,sipType_Joint_JointType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getType, doc_Joint_getType);

    return NULL;
}


PyDoc_STRVAR(doc_Joint_getTypeName, "Joint.getTypeName() -> string");

extern "C" {static PyObject *meth_Joint_getTypeName(PyObject *, PyObject *);}
static PyObject *meth_Joint_getTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Joint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Joint, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->getTypeName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Joint, sipName_getTypeName, doc_Joint_getTypeName);

    return NULL;
}


extern "C" {static PyObject *slot_Joint___repr__(PyObject *);}
static PyObject *slot_Joint___repr__(PyObject *sipSelf)
{
    Joint *sipCpp = reinterpret_cast<Joint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Joint));

    if (!sipCpp)
        return 0;


    {
        {
            const char*sipRes = 0;

#line 54 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
        std::ostringstream oss;
        oss<<(*sipCpp);
        std::string s(oss.str());
        sipRes=s.c_str();
#line 248 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Joint(void *, const sipTypeDef *);}
static void *cast_Joint(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Joint)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Joint(void *, int);}
static void release_Joint(void *sipCppV,int)
{
    delete reinterpret_cast<Joint *>(sipCppV);
}


extern "C" {static void assign_Joint(void *, SIP_SSIZE_T, const void *);}
static void assign_Joint(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Joint *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Joint *>(sipSrc);
}


extern "C" {static void *array_Joint(SIP_SSIZE_T);}
static void *array_Joint(SIP_SSIZE_T sipNrElem)
{
    return new Joint[sipNrElem];
}


extern "C" {static void *copy_Joint(const void *, SIP_SSIZE_T);}
static void *copy_Joint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Joint(reinterpret_cast<const Joint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Joint(sipSimpleWrapper *);}
static void dealloc_Joint(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Joint(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Joint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Joint(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Joint *sipCpp = 0;

    {
        std::string* a0;
        int a0State = 0;
        Joint::JointType a1 = Joint::None;
        double a2 = 1;
        double a3 = 0;
        double a4 = 0;
        double a5 = 0;
        double a6 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1|Eddddd", sipType_std_string,&a0, &a0State, sipType_Joint_JointType, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipCpp = new Joint(*a0,a1,a2,a3,a4,a5,a6);
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
        Joint::JointType a0 = Joint::None;
        double a1 = 1;
        double a2 = 0;
        double a3 = 0;
        double a4 = 0;
        double a5 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|Eddddd", sipType_Joint_JointType, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new Joint(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
        std::string* a0;
        int a0State = 0;
        Vector* a1;
        Vector* a2;
        Joint::JointType a3;
        double a4 = 1;
        double a5 = 0;
        double a6 = 0;
        double a7 = 0;
        double a8 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9J9E|ddddd", sipType_std_string,&a0, &a0State, sipType_Vector, &a1, sipType_Vector, &a2, sipType_Joint_JointType, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new Joint(*a0,*a1,*a2,a3,a4,a5,a6,a7,a8);
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
        Vector* a0;
        Vector* a1;
        Joint::JointType a2;
        double a3 = 1;
        double a4 = 0;
        double a5 = 0;
        double a6 = 0;
        double a7 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9E|ddddd", sipType_Vector, &a0, sipType_Vector, &a1, sipType_Joint_JointType, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp = new Joint(*a0,*a1,a2,a3,a4,a5,a6,a7);

            return sipCpp;
        }
    }

    {
        const Joint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Joint, &a0))
        {
            sipCpp = new Joint(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Joint[] = {
    {(void *)slot_Joint___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Joint[] = {
    {SIP_MLNAME_CAST(sipName_JointAxis), meth_Joint_JointAxis, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_JointAxis)},
    {SIP_MLNAME_CAST(sipName_JointOrigin), meth_Joint_JointOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_JointOrigin)},
    {SIP_MLNAME_CAST(sipName_getName), meth_Joint_getName, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getName)},
    {SIP_MLNAME_CAST(sipName_getType), meth_Joint_getType, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getType)},
    {SIP_MLNAME_CAST(sipName_getTypeName), meth_Joint_getTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_getTypeName)},
    {SIP_MLNAME_CAST(sipName_pose), meth_Joint_pose, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_pose)},
    {SIP_MLNAME_CAST(sipName_twist), meth_Joint_twist, METH_VARARGS, SIP_MLDOC_CAST(doc_Joint_twist)}
};

static sipEnumMemberDef enummembers_Joint[] = {
    {sipName_None, static_cast<int>(Joint::None), 23},
    {sipName_RotAxis, static_cast<int>(Joint::RotAxis), 23},
    {sipName_RotX, static_cast<int>(Joint::RotX), 23},
    {sipName_RotY, static_cast<int>(Joint::RotY), 23},
    {sipName_RotZ, static_cast<int>(Joint::RotZ), 23},
    {sipName_TransAxis, static_cast<int>(Joint::TransAxis), 23},
    {sipName_TransX, static_cast<int>(Joint::TransX), 23},
    {sipName_TransY, static_cast<int>(Joint::TransY), 23},
    {sipName_TransZ, static_cast<int>(Joint::TransZ), 23},
};

PyDoc_STRVAR(doc_Joint, "\1Joint(string, Joint.JointType type=Joint.None, float scale=1, float offset=0, float inertia=0, float damping=0, float stiffness=0)\n"
    "Joint(Joint.JointType type=Joint.None, float scale=1, float offset=0, float inertia=0, float damping=0, float stiffness=0)\n"
    "Joint(string, Vector, Vector, Joint.JointType, float scale=1, float offset=0, float inertia=0, float damping=0, float stiffness=0)\n"
    "Joint(Vector, Vector, Joint.JointType, float scale=1, float offset=0, float inertia=0, float damping=0, float stiffness=0)\n"
    "Joint(Joint)");


sipClassTypeDef sipTypeDef_PyKDL_Joint = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Joint,
        {0}
    },
    {
        sipNameNr_Joint,
        {0, 0, 1},
        7, methods_Joint,
        9, enummembers_Joint,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Joint,
    -1,
    -1,
    0,
    slots_Joint,
    init_type_Joint,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Joint,
    assign_Joint,
    array_Joint,
    copy_Joint,
    release_Joint,
    cast_Joint,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 352 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 498 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 505 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Wrench_Zero, "Wrench.Zero() -> Wrench");

extern "C" {static PyObject *meth_Wrench_Zero(PyObject *, PyObject *);}
static PyObject *meth_Wrench_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Wrench*sipRes;

            sipRes = new Wrench(Wrench::Zero());

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_Zero, doc_Wrench_Zero);

    return NULL;
}


PyDoc_STRVAR(doc_Wrench_ReverseSign, "Wrench.ReverseSign()");

extern "C" {static PyObject *meth_Wrench_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Wrench_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Wrench *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Wrench, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_ReverseSign, doc_Wrench_ReverseSign);

    return NULL;
}


PyDoc_STRVAR(doc_Wrench_RefPoint, "Wrench.RefPoint(Vector) -> Wrench");

extern "C" {static PyObject *meth_Wrench_RefPoint(PyObject *, PyObject *);}
static PyObject *meth_Wrench_RefPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        const Wrench *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Wrench, &sipCpp, sipType_Vector, &a0))
        {
            Wrench*sipRes;

            sipRes = new Wrench(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_RefPoint, doc_Wrench_RefPoint);

    return NULL;
}


extern "C" {static PyObject *slot_Wrench___neg__(PyObject *);}
static PyObject *slot_Wrench___neg__(PyObject *sipSelf)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;


    {
        {
            Wrench*sipRes;

            sipRes = new Wrench(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Wrench___mul__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        double a0;
        const Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Wrench, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Wrench___div__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Wrench___add__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;
        const Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Wrench___sub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;
        const Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Wrench___eq__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,eq_slot,sipType_Wrench,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Wrench___ne__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,ne_slot,sipType_Wrench,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Wrench___repr__(PyObject *);}
static PyObject *slot_Wrench___repr__(PyObject *sipSelf)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;


    {
        {
            const char*sipRes = 0;

#line 389 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=s.c_str();
#line 818 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    return 0;
}


extern "C" {static int slot_Wrench___setitem__(PyObject *,PyObject *);}
static int slot_Wrench___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 380 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 856 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Wrench___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 371 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 892 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_Wrench___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp->Wrench::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Wrench___isub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp->Wrench::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Wrench(void *, const sipTypeDef *);}
static void *cast_Wrench(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Wrench)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Wrench(void *, int);}
static void release_Wrench(void *sipCppV,int)
{
    delete reinterpret_cast<Wrench *>(sipCppV);
}


extern "C" {static PyObject *pickle_Wrench(void *);}
static PyObject *pickle_Wrench(void *sipCppV)
{
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipCppV);
    PyObject *sipRes;

#line 400 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->force), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->torque), vector_type, Py_None));
#line 1014 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Wrench(void *, SIP_SSIZE_T, const void *);}
static void assign_Wrench(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Wrench *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Wrench *>(sipSrc);
}


extern "C" {static void *array_Wrench(SIP_SSIZE_T);}
static void *array_Wrench(SIP_SSIZE_T sipNrElem)
{
    return new Wrench[sipNrElem];
}


extern "C" {static void *copy_Wrench(const void *, SIP_SSIZE_T);}
static void *copy_Wrench(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Wrench(reinterpret_cast<const Wrench *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Wrench(sipSimpleWrapper *);}
static void dealloc_Wrench(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Wrench(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Wrench(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Wrench(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Wrench *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new Wrench();

            return sipCpp;
        }
    }

    {
        const Vector* a0;
        const Vector* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new Wrench(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const Wrench* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Wrench, &a0))
        {
            sipCpp = new Wrench(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Wrench[] = {
    {(void *)slot_Wrench___neg__, neg_slot},
    {(void *)slot_Wrench___mul__, mul_slot},
    {(void *)slot_Wrench___div__, div_slot},
    {(void *)slot_Wrench___add__, add_slot},
    {(void *)slot_Wrench___sub__, sub_slot},
    {(void *)slot_Wrench___eq__, eq_slot},
    {(void *)slot_Wrench___ne__, ne_slot},
    {(void *)slot_Wrench___repr__, repr_slot},
    {(void *)slot_Wrench___setitem__, setitem_slot},
    {(void *)slot_Wrench___getitem__, getitem_slot},
    {(void *)slot_Wrench___iadd__, iadd_slot},
    {(void *)slot_Wrench___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Wrench[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), meth_Wrench_RefPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Wrench_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Wrench_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_Zero)}
};


extern "C" {static PyObject *varget_Wrench_force(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_force(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -11);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->force;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -11, sipPy);

    return sipPy;
}


extern "C" {static int varset_Wrench_force(void *, PyObject *, PyObject *);}
static int varset_Wrench_force(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->force = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Wrench_torque(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_torque(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -12);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->torque;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -12, sipPy);

    return sipPy;
}


extern "C" {static int varset_Wrench_torque(void *, PyObject *, PyObject *);}
static int varset_Wrench_torque(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    Wrench *sipCpp = reinterpret_cast<Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->torque = *sipVal;

    return 0;
}

sipVariableDef variables_Wrench[] = {
    {InstanceVariable, sipName_force, (PyMethodDef *)varget_Wrench_force, (PyMethodDef *)varset_Wrench_force, NULL, NULL},
    {InstanceVariable, sipName_torque, (PyMethodDef *)varget_Wrench_torque, (PyMethodDef *)varset_Wrench_torque, NULL, NULL},
};

PyDoc_STRVAR(doc_Wrench, "\1Wrench()\n"
    "Wrench(Vector, Vector)\n"
    "Wrench(Wrench)");


sipClassTypeDef sipTypeDef_PyKDL_Wrench = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Wrench,
        {0}
    },
    {
        sipNameNr_Wrench,
        {0, 0, 1},
        3, methods_Wrench,
        0, 0,
        2, variables_Wrench,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Wrench,
    -1,
    -1,
    0,
    slots_Wrench,
    init_type_Wrench,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Wrench,
    assign_Wrench,
    array_Wrench,
    copy_Wrench,
    release_Wrench,
    cast_Wrench,
    0,
    0,
    0,
    pickle_Wrench,
    0,
    0
};

#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1258 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1265 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Twist_Zero, "Twist.Zero() -> Twist");

extern "C" {static PyObject *meth_Twist_Zero(PyObject *, PyObject *);}
static PyObject *meth_Twist_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Twist*sipRes;

            sipRes = new Twist(Twist::Zero());

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_Zero, doc_Twist_Zero);

    return NULL;
}


PyDoc_STRVAR(doc_Twist_ReverseSign, "Twist.ReverseSign()");

extern "C" {static PyObject *meth_Twist_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Twist_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Twist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Twist, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_ReverseSign, doc_Twist_ReverseSign);

    return NULL;
}


PyDoc_STRVAR(doc_Twist_RefPoint, "Twist.RefPoint(Vector) -> Twist");

extern "C" {static PyObject *meth_Twist_RefPoint(PyObject *, PyObject *);}
static PyObject *meth_Twist_RefPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        const Twist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Twist, &sipCpp, sipType_Vector, &a0))
        {
            Twist*sipRes;

            sipRes = new Twist(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_RefPoint, doc_Twist_RefPoint);

    return NULL;
}


extern "C" {static PyObject *slot_Twist___neg__(PyObject *);}
static PyObject *slot_Twist___neg__(PyObject *sipSelf)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;


    {
        {
            Twist*sipRes;

            sipRes = new Twist(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Twist___mul__(PyObject *,PyObject *);}
static PyObject *slot_Twist___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    {
        double a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Twist, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Twist___div__(PyObject *,PyObject *);}
static PyObject *slot_Twist___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Twist___add__(PyObject *,PyObject *);}
static PyObject *slot_Twist___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Twist___sub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Twist___eq__(PyObject *,PyObject *);}
static PyObject *slot_Twist___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,eq_slot,sipType_Twist,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Twist___ne__(PyObject *,PyObject *);}
static PyObject *slot_Twist___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,ne_slot,sipType_Twist,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Twist___repr__(PyObject *);}
static PyObject *slot_Twist___repr__(PyObject *sipSelf)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;


    {
        {
            const char*sipRes = 0;

#line 316 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=s.c_str();
#line 1578 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    return 0;
}


extern "C" {static int slot_Twist___setitem__(PyObject *,PyObject *);}
static int slot_Twist___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 307 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 1616 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Twist___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Twist___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 298 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 1652 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_Twist___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Twist___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp->Twist::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Twist___isub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Twist *sipCpp = reinterpret_cast<Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp->Twist::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Twist(void *, const sipTypeDef *);}
static void *cast_Twist(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Twist)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Twist(void *, int);}
static void release_Twist(void *sipCppV,int)
{
    delete reinterpret_cast<Twist *>(sipCppV);
}


extern "C" {static PyObject *pickle_Twist(void *);}
static PyObject *pickle_Twist(void *sipCppV)
{
    Twist *sipCpp = reinterpret_cast<Twist *>(sipCppV);
    PyObject *sipRes;

#line 328 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->vel), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->rot), vector_type, Py_None));
#line 1774 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Twist(void *, SIP_SSIZE_T, const void *);}
static void assign_Twist(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Twist *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Twist *>(sipSrc);
}


extern "C" {static void *array_Twist(SIP_SSIZE_T);}
static void *array_Twist(SIP_SSIZE_T sipNrElem)
{
    return new Twist[sipNrElem];
}


extern "C" {static void *copy_Twist(const void *, SIP_SSIZE_T);}
static void *copy_Twist(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Twist(reinterpret_cast<const Twist *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Twist(sipSimpleWrapper *);}
static void dealloc_Twist(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Twist(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Twist(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Twist(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Twist *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new Twist();

            return sipCpp;
        }
    }

    {
        const Vector* a0;
        const Vector* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new Twist(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const Twist* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Twist, &a0))
        {
            sipCpp = new Twist(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Twist[] = {
    {(void *)slot_Twist___neg__, neg_slot},
    {(void *)slot_Twist___mul__, mul_slot},
    {(void *)slot_Twist___div__, div_slot},
    {(void *)slot_Twist___add__, add_slot},
    {(void *)slot_Twist___sub__, sub_slot},
    {(void *)slot_Twist___eq__, eq_slot},
    {(void *)slot_Twist___ne__, ne_slot},
    {(void *)slot_Twist___repr__, repr_slot},
    {(void *)slot_Twist___setitem__, setitem_slot},
    {(void *)slot_Twist___getitem__, getitem_slot},
    {(void *)slot_Twist___iadd__, iadd_slot},
    {(void *)slot_Twist___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Twist[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), meth_Twist_RefPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Twist_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Twist_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_Zero)}
};


extern "C" {static PyObject *varget_Twist_rot(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_rot(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    Twist *sipCpp = reinterpret_cast<Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -13);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->rot;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -13, sipPy);

    return sipPy;
}


extern "C" {static int varset_Twist_rot(void *, PyObject *, PyObject *);}
static int varset_Twist_rot(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    Twist *sipCpp = reinterpret_cast<Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->rot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Twist_vel(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_vel(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    Twist *sipCpp = reinterpret_cast<Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -14);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->vel;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -14, sipPy);

    return sipPy;
}


extern "C" {static int varset_Twist_vel(void *, PyObject *, PyObject *);}
static int varset_Twist_vel(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    Twist *sipCpp = reinterpret_cast<Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->vel = *sipVal;

    return 0;
}

sipVariableDef variables_Twist[] = {
    {InstanceVariable, sipName_rot, (PyMethodDef *)varget_Twist_rot, (PyMethodDef *)varset_Twist_rot, NULL, NULL},
    {InstanceVariable, sipName_vel, (PyMethodDef *)varget_Twist_vel, (PyMethodDef *)varset_Twist_vel, NULL, NULL},
};

PyDoc_STRVAR(doc_Twist, "\1Twist()\n"
    "Twist(Vector, Vector)\n"
    "Twist(Twist)");


sipClassTypeDef sipTypeDef_PyKDL_Twist = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Twist,
        {0}
    },
    {
        sipNameNr_Twist,
        {0, 0, 1},
        3, methods_Twist,
        0, 0,
        2, variables_Twist,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Twist,
    -1,
    -1,
    0,
    slots_Twist,
    init_type_Twist,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Twist,
    assign_Twist,
    array_Twist,
    copy_Twist,
    release_Twist,
    cast_Twist,
    0,
    0,
    0,
    pickle_Twist,
    0,
    0
};

#line 201 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2018 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

#line 102 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2025 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2031 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2037 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 352 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2043 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 81 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rigidbodyinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 2048 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 159 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2052 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Frame_DH_Craig1989, "Frame.DH_Craig1989(float, float, float, float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH_Craig1989(PyObject *, PyObject *);}
static PyObject *meth_Frame_DH_Craig1989(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;
        Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Frame*sipRes;

            sipRes = new Frame(sipCpp->DH_Craig1989(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH_Craig1989, doc_Frame_DH_Craig1989);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_DH, "Frame.DH(float, float, float, float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH(PyObject *, PyObject *);}
static PyObject *meth_Frame_DH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;
        Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Frame*sipRes;

            sipRes = new Frame(sipCpp->DH(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH, doc_Frame_DH);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Inverse, "Frame.Inverse() -> Frame\n"
    "Frame.Inverse(Vector) -> Vector\n"
    "Frame.Inverse(Wrench) -> Wrench\n"
    "Frame.Inverse(Twist) -> Twist");

extern "C" {static PyObject *meth_Frame_Inverse(PyObject *, PyObject *);}
static PyObject *meth_Frame_Inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frame, &sipCpp))
        {
            Frame*sipRes;

            sipRes = new Frame(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    {
        const Vector* a0;
        const Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Vector, &a0))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const Wrench* a0;
        const Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Wrench, &a0))
        {
            Wrench*sipRes;

            sipRes = new Wrench(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        const Twist* a0;
        const Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0))
        {
            Twist*sipRes;

            sipRes = new Twist(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Inverse, doc_Frame_Inverse);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Identity, "Frame.Identity() -> Frame");

extern "C" {static PyObject *meth_Frame_Identity(PyObject *, PyObject *);}
static PyObject *meth_Frame_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Frame*sipRes;

            sipRes = new Frame(Frame::Identity());

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Identity, doc_Frame_Identity);

    return NULL;
}


PyDoc_STRVAR(doc_Frame_Integrate, "Frame.Integrate(Twist, float)");

extern "C" {static PyObject *meth_Frame_Integrate(PyObject *, PyObject *);}
static PyObject *meth_Frame_Integrate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Twist* a0;
        double a1;
        Frame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9d", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0, &a1))
        {
            sipCpp->Integrate(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Integrate, doc_Frame_Integrate);

    return NULL;
}


extern "C" {static PyObject *slot_Frame___eq__(PyObject *,PyObject *);}
static PyObject *slot_Frame___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,eq_slot,sipType_Frame,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Frame___ne__(PyObject *,PyObject *);}
static PyObject *slot_Frame___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,ne_slot,sipType_Frame,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Frame___mul__(PyObject *,PyObject *);}
static PyObject *slot_Frame___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Frame* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Vector, &a1))
        {
            Vector*sipRes;

            sipRes = new Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        Frame* a0;
        const Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Wrench, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        Frame* a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Twist, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    {
        const Frame* a0;
        const Frame* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Frame, &a1))
        {
            Frame*sipRes;

            sipRes = new Frame((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Frame,NULL);
        }
    }

    {
        const Frame* a0;
        const RigidBodyInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_RigidBodyInertia, &a1))
        {
            RigidBodyInertia*sipRes;

            sipRes = new RigidBodyInertia((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RigidBodyInertia,NULL);
        }
    }

    {
        const Frame* a0;
        const FrameVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_FrameVel, &a1))
        {
            FrameVel*sipRes;

            sipRes = new FrameVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FrameVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Frame___repr__(PyObject *);}
static PyObject *slot_Frame___repr__(PyObject *sipSelf)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;


    {
        {
            const char*sipRes = 0;

#line 243 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=s.c_str();
#line 2422 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    return 0;
}


extern "C" {static int slot_Frame___setitem__(PyObject *,PyObject *);}
static int slot_Frame___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Td", &PyTuple_Type, &a0, &a1))
        {
#line 229 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    if(j==3)
        (*sipCpp).p(i)=a1;
    else
        (*sipCpp).M(i,j)=a1;
#line 2465 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Frame___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Frame___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PyTuple_Type, &a0))
        {
            double sipRes = 0;

#line 218 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(i,j);
#line 2503 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Frame(void *, const sipTypeDef *);}
static void *cast_Frame(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Frame)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Frame(void *, int);}
static void release_Frame(void *sipCppV,int)
{
    delete reinterpret_cast<Frame *>(sipCppV);
}


extern "C" {static PyObject *pickle_Frame(void *);}
static PyObject *pickle_Frame(void *sipCppV)
{
    Frame *sipCpp = reinterpret_cast<Frame *>(sipCppV);
    PyObject *sipRes;

#line 265 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    const sipTypeDef *rotation_type = sipFindType("Rotation");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->M), rotation_type, Py_None),
                                 sipConvertFromType(&(sipCpp->p), vector_type, Py_None));
#line 2546 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Frame(void *, SIP_SSIZE_T, const void *);}
static void assign_Frame(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Frame *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Frame *>(sipSrc);
}


extern "C" {static void *array_Frame(SIP_SSIZE_T);}
static void *array_Frame(SIP_SSIZE_T sipNrElem)
{
    return new Frame[sipNrElem];
}


extern "C" {static void *copy_Frame(const void *, SIP_SSIZE_T);}
static void *copy_Frame(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Frame(reinterpret_cast<const Frame *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Frame(sipSimpleWrapper *);}
static void dealloc_Frame(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Frame(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Frame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Frame(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Frame *sipCpp = 0;

    {
        const Rotation* a0;
        const Vector* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
            sipCpp = new Frame(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const Vector* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Vector, &a0))
        {
            sipCpp = new Frame(*a0);

            return sipCpp;
        }
    }

    {
        const Rotation* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new Frame(*a0);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new Frame();

            return sipCpp;
        }
    }

    {
        const Frame* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Frame, &a0))
        {
            sipCpp = new Frame(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Frame[] = {
    {(void *)slot_Frame___eq__, eq_slot},
    {(void *)slot_Frame___ne__, ne_slot},
    {(void *)slot_Frame___mul__, mul_slot},
    {(void *)slot_Frame___repr__, repr_slot},
    {(void *)slot_Frame___setitem__, setitem_slot},
    {(void *)slot_Frame___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Frame[] = {
    {SIP_MLNAME_CAST(sipName_DH), meth_Frame_DH, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_DH)},
    {SIP_MLNAME_CAST(sipName_DH_Craig1989), meth_Frame_DH_Craig1989, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_DH_Craig1989)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_Frame_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_Identity)},
    {SIP_MLNAME_CAST(sipName_Integrate), meth_Frame_Integrate, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_Integrate)},
    {SIP_MLNAME_CAST(sipName_Inverse), meth_Frame_Inverse, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_Inverse)}
};


extern "C" {static PyObject *varget_Frame_M(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_M(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Rotation*sipVal;
    Frame *sipCpp = reinterpret_cast<Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -15);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->M;

    sipPy = sipConvertFromType(sipVal, sipType_Rotation, NULL);
    sipKeepReference(sipPySelf, -15, sipPy);

    return sipPy;
}


extern "C" {static int varset_Frame_M(void *, PyObject *, PyObject *);}
static int varset_Frame_M(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Rotation*sipVal;
    Frame *sipCpp = reinterpret_cast<Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Rotation *>(sipForceConvertToType(sipPy,sipType_Rotation,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->M = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Frame_p(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_p(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    Vector*sipVal;
    Frame *sipCpp = reinterpret_cast<Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -16);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->p;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, NULL);
    sipKeepReference(sipPySelf, -16, sipPy);

    return sipPy;
}


extern "C" {static int varset_Frame_p(void *, PyObject *, PyObject *);}
static int varset_Frame_p(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Vector*sipVal;
    Frame *sipCpp = reinterpret_cast<Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<Vector *>(sipForceConvertToType(sipPy,sipType_Vector,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->p = *sipVal;

    return 0;
}

sipVariableDef variables_Frame[] = {
    {InstanceVariable, sipName_M, (PyMethodDef *)varget_Frame_M, (PyMethodDef *)varset_Frame_M, NULL, NULL},
    {InstanceVariable, sipName_p, (PyMethodDef *)varget_Frame_p, (PyMethodDef *)varset_Frame_p, NULL, NULL},
};

PyDoc_STRVAR(doc_Frame, "\1Frame(Rotation, Vector)\n"
    "Frame(Vector)\n"
    "Frame(Rotation)\n"
    "Frame()\n"
    "Frame(Frame)");


sipClassTypeDef sipTypeDef_PyKDL_Frame = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Frame,
        {0}
    },
    {
        sipNameNr_Frame,
        {0, 0, 1},
        5, methods_Frame,
        0, 0,
        2, variables_Frame,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Frame,
    -1,
    -1,
    0,
    slots_Frame,
    init_type_Frame,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Frame,
    assign_Frame,
    array_Frame,
    copy_Frame,
    release_Frame,
    cast_Frame,
    0,
    0,
    0,
    pickle_Frame,
    0,
    0
};

#line 102 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2810 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2817 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2823 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 352 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2829 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 81 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rigidbodyinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 2834 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 44 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2838 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"
#line 100 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2842 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Rotation_SetInverse, "Rotation.SetInverse()");

extern "C" {static PyObject *meth_Rotation_SetInverse(PyObject *, PyObject *);}
static PyObject *meth_Rotation_SetInverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->SetInverse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_SetInverse, doc_Rotation_SetInverse);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_Inverse, "Rotation.Inverse() -> Rotation\n"
    "Rotation.Inverse(Vector) -> Vector\n"
    "Rotation.Inverse(Wrench) -> Wrench\n"
    "Rotation.Inverse(Twist) -> Twist");

extern "C" {static PyObject *meth_Rotation_Inverse(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            Rotation*sipRes;

            sipRes = new Rotation(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    {
        const Vector* a0;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const Wrench* a0;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Wrench, &a0))
        {
            Wrench*sipRes;

            sipRes = new Wrench(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        const Twist* a0;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Twist, &a0))
        {
            Twist*sipRes;

            sipRes = new Twist(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Inverse, doc_Rotation_Inverse);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_Identity, "Rotation.Identity() -> Rotation");

extern "C" {static PyObject *meth_Rotation_Identity(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::Identity());

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Identity, doc_Rotation_Identity);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_RotX, "Rotation.RotX(float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotX(PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotX(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::RotX(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotX, doc_Rotation_RotX);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_RotY, "Rotation.RotY(float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotY(PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotY(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::RotY(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotY, doc_Rotation_RotY);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_RotZ, "Rotation.RotZ(float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotZ(PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotZ(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::RotZ(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotZ, doc_Rotation_RotZ);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_Rot, "Rotation.Rot(Vector, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Rot(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Rot(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9d", sipType_Vector, &a0, &a1))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::Rot(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Rot, doc_Rotation_Rot);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_Rot2, "Rotation.Rot2(Vector, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Rot2(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Rot2(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vector* a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9d", sipType_Vector, &a0, &a1))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::Rot2(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Rot2, doc_Rotation_Rot2);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_EulerZYZ, "Rotation.EulerZYZ(float, float, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_EulerZYZ(PyObject *, PyObject *);}
static PyObject *meth_Rotation_EulerZYZ(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "ddd", &a0, &a1, &a2))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::EulerZYZ(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_EulerZYZ, doc_Rotation_EulerZYZ);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_RPY, "Rotation.RPY(float, float, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RPY(PyObject *, PyObject *);}
static PyObject *meth_Rotation_RPY(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "ddd", &a0, &a1, &a2))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::RPY(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RPY, doc_Rotation_RPY);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_EulerZYX, "Rotation.EulerZYX(float, float, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_EulerZYX(PyObject *, PyObject *);}
static PyObject *meth_Rotation_EulerZYX(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "ddd", &a0, &a1, &a2))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::EulerZYX(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_EulerZYX, doc_Rotation_EulerZYX);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_Quaternion, "Rotation.Quaternion(float, float, float, float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Quaternion(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Quaternion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "dddd", &a0, &a1, &a2, &a3))
        {
            Rotation*sipRes;

            sipRes = new Rotation(Rotation::Quaternion(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Quaternion, doc_Rotation_Quaternion);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_DoRotX, "Rotation.DoRotX(float)");

extern "C" {static PyObject *meth_Rotation_DoRotX(PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotX, doc_Rotation_DoRotX);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_DoRotY, "Rotation.DoRotY(float)");

extern "C" {static PyObject *meth_Rotation_DoRotY(PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotY, doc_Rotation_DoRotY);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_DoRotZ, "Rotation.DoRotZ(float)");

extern "C" {static PyObject *meth_Rotation_DoRotZ(PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotZ, doc_Rotation_DoRotZ);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetRot, "Rotation.GetRot() -> Vector");

extern "C" {static PyObject *meth_Rotation_GetRot(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->GetRot());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRot, doc_Rotation_GetRot);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetRotAngle, "Rotation.GetRotAngle(float eps=epsilon) -> (float, Vector)");

extern "C" {static PyObject *meth_Rotation_GetRotAngle(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRotAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Vector* a0;
        double a1 = epsilon;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|d", &sipSelf, sipType_Rotation, &sipCpp, &a1))
        {
            double sipRes;
            a0 = new Vector();

            sipRes = sipCpp->GetRotAngle(*a0,a1);

            return sipBuildResult(0,"(dN)",sipRes,a0,sipType_Vector,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRotAngle, doc_Rotation_GetRotAngle);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetEulerZYZ, "Rotation.GetEulerZYZ() -> (float, float, float)");

extern "C" {static PyObject *meth_Rotation_GetEulerZYZ(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetEulerZYZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetEulerZYZ(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetEulerZYZ, doc_Rotation_GetEulerZYZ);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetRPY, "Rotation.GetRPY() -> (float, float, float)");

extern "C" {static PyObject *meth_Rotation_GetRPY(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRPY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetRPY(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRPY, doc_Rotation_GetRPY);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetEulerZYX, "Rotation.GetEulerZYX() -> (float, float, float)");

extern "C" {static PyObject *meth_Rotation_GetEulerZYX(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetEulerZYX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetEulerZYX(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetEulerZYX, doc_Rotation_GetEulerZYX);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_GetQuaternion, "Rotation.GetQuaternion() -> (float, float, float, float)");

extern "C" {static PyObject *meth_Rotation_GetQuaternion(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetQuaternion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        double a3;
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetQuaternion(a0,a1,a2,a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetQuaternion, doc_Rotation_GetQuaternion);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_UnitX, "Rotation.UnitX() -> Vector\n"
    "Rotation.UnitX(Vector)");

extern "C" {static PyObject *meth_Rotation_UnitX(PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->UnitX());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const Vector* a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitX(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitX, doc_Rotation_UnitX);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_UnitY, "Rotation.UnitY() -> Vector\n"
    "Rotation.UnitY(Vector)");

extern "C" {static PyObject *meth_Rotation_UnitY(PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->UnitY());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const Vector* a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitY(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitY, doc_Rotation_UnitY);

    return NULL;
}


PyDoc_STRVAR(doc_Rotation_UnitZ, "Rotation.UnitZ() -> Vector\n"
    "Rotation.UnitZ(Vector)");

extern "C" {static PyObject *meth_Rotation_UnitZ(PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            Vector*sipRes;

            sipRes = new Vector(sipCpp->UnitZ());

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        const Vector* a0;
        Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitZ(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitZ, doc_Rotation_UnitZ);

    return NULL;
}


extern "C" {static PyObject *slot_Rotation___eq__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Rotation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Rotation, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,eq_slot,sipType_Rotation,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Rotation___ne__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Rotation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Rotation, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,ne_slot,sipType_Rotation,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Rotation___mul__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Rotation* a0;
        const Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
            Vector*sipRes;

            sipRes = new Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,NULL);
        }
    }

    {
        Rotation* a0;
        const Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Twist, &a1))
        {
            Twist*sipRes;

            sipRes = new Twist((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,NULL);
        }
    }

    {
        Rotation* a0;
        const Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Wrench, &a1))
        {
            Wrench*sipRes;

            sipRes = new Wrench((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,NULL);
        }
    }

    {
        const Rotation* a0;
        const Rotation* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Rotation, &a1))
        {
            Rotation*sipRes;

            sipRes = new Rotation((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,NULL);
        }
    }

    {
        const Rotation* a0;
        const RigidBodyInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_RigidBodyInertia, &a1))
        {
            RigidBodyInertia*sipRes;

            sipRes = new RigidBodyInertia((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RigidBodyInertia,NULL);
        }
    }

    {
        const Rotation* a0;
        const VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_VectorVel, &a1))
        {
            VectorVel*sipRes;

            sipRes = new VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,NULL);
        }
    }

    {
        const Rotation* a0;
        const RotationVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_RotationVel, &a1))
        {
            RotationVel*sipRes;

            sipRes = new RotationVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_PyKDL,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Rotation___repr__(PyObject *);}
static PyObject *slot_Rotation___repr__(PyObject *sipSelf)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return 0;


    {
        {
            const char*sipRes = 0;

#line 139 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=s.c_str();
#line 3790 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    return 0;
}


extern "C" {static int slot_Rotation___setitem__(PyObject *,PyObject *);}
static int slot_Rotation___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Td", &PyTuple_Type, &a0, &a1))
        {
#line 128 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 2) {
        PyErr_SetString(PyExc_IndexError, "Rotation index out of range");
        return 0;
    }
    (*sipCpp)(i,j)=a1;
#line 3830 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_Rotation___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PyTuple_Type, &a0))
        {
            double sipRes = 0;

#line 117 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0, "ii", &i, &j);
    if (i < 0 || j < 0 || i > 2 || j > 2) {
        PyErr_SetString(PyExc_IndexError, "Rotation index out of range");
        return 0;
    }
    sipRes=((const Rotation)(*sipCpp))(i,j);
#line 3868 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Rotation(void *, const sipTypeDef *);}
static void *cast_Rotation(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Rotation)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Rotation(void *, int);}
static void release_Rotation(void *sipCppV,int)
{
    delete reinterpret_cast<Rotation *>(sipCppV);
}


extern "C" {static PyObject *pickle_Rotation(void *);}
static PyObject *pickle_Rotation(void *sipCppV)
{
    Rotation *sipCpp = reinterpret_cast<Rotation *>(sipCppV);
    PyObject *sipRes;

#line 188 "/opt/ros_catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    sipRes = Py_BuildValue("ddddddddd", (*sipCpp)(0,0), (*sipCpp)(0,1), (*sipCpp)(0,2),
                                        (*sipCpp)(1,0), (*sipCpp)(1,1), (*sipCpp)(1,2),
                                        (*sipCpp)(2,0), (*sipCpp)(2,1), (*sipCpp)(2,2));
#line 3910 "/opt/ros_catkin_ws/build_isolated/python_orocos_kdl/install/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Rotation(void *, SIP_SSIZE_T, const void *);}
static void assign_Rotation(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Rotation *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Rotation *>(sipSrc);
}


extern "C" {static void *array_Rotation(SIP_SSIZE_T);}
static void *array_Rotation(SIP_SSIZE_T sipNrElem)
{
    return new Rotation[sipNrElem];
}


extern "C" {static void *copy_Rotation(const void *, SIP_SSIZE_T);}
static void *copy_Rotation(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Rotation(reinterpret_cast<const Rotation *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Rotation(sipSimpleWrapper *);}
static void dealloc_Rotation(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Rotation(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Rotation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Rotation(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Rotation *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new Rotation();

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        double a3;
        double a4;
        double a5;
        double a6;
        double a7;
        double a8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ddddddddd", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new Rotation(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            return sipCpp;
        }
    }

    {
        const Vector* a0;
        const Vector* a1;
        const Vector* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9J9", sipType_Vector, &a0, sipType_Vector, &a1, sipType_Vector, &a2))
        {
            sipCpp = new Rotation(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    {
        const Rotation* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new Rotation(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Rotation[] = {
    {(void *)slot_Rotation___eq__, eq_slot},
    {(void *)slot_Rotation___ne__, ne_slot},
    {(void *)slot_Rotation___mul__, mul_slot},
    {(void *)slot_Rotation___repr__, repr_slot},
    {(void *)slot_Rotation___setitem__, setitem_slot},
    {(void *)slot_Rotation___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Rotation[] = {
    {SIP_MLNAME_CAST(sipName_DoRotX), meth_Rotation_DoRotX, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_DoRotX)},
    {SIP_MLNAME_CAST(sipName_DoRotY), meth_Rotation_DoRotY, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_DoRotY)},
    {SIP_MLNAME_CAST(sipName_DoRotZ), meth_Rotation_DoRotZ, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_DoRotZ)},
    {SIP_MLNAME_CAST(sipName_EulerZYX), meth_Rotation_EulerZYX, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_EulerZYX)},
    {SIP_MLNAME_CAST(sipName_EulerZYZ), meth_Rotation_EulerZYZ, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_EulerZYZ)},
    {SIP_MLNAME_CAST(sipName_GetEulerZYX), meth_Rotation_GetEulerZYX, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetEulerZYX)},
    {SIP_MLNAME_CAST(sipName_GetEulerZYZ), meth_Rotation_GetEulerZYZ, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetEulerZYZ)},
    {SIP_MLNAME_CAST(sipName_GetQuaternion), meth_Rotation_GetQuaternion, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetQuaternion)},
    {SIP_MLNAME_CAST(sipName_GetRPY), meth_Rotation_GetRPY, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetRPY)},
    {SIP_MLNAME_CAST(sipName_GetRot), meth_Rotation_GetRot, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetRot)},
    {SIP_MLNAME_CAST(sipName_GetRotAngle), meth_Rotation_GetRotAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetRotAngle)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_Rotation_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Identity)},
    {SIP_MLNAME_CAST(sipName_Inverse), meth_Rotation_Inverse, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Inverse)},
    {SIP_MLNAME_CAST(sipName_Quaternion), meth_Rotation_Quaternion, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Quaternion)},
    {SIP_MLNAME_CAST(sipName_RPY), meth_Rotation_RPY, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_RPY)},
    {SIP_MLNAME_CAST(sipName_Rot), meth_Rotation_Rot, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Rot)},
    {SIP_MLNAME_CAST(sipName_Rot2), meth_Rotation_Rot2, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Rot2)},
    {SIP_MLNAME_CAST(sipName_RotX), meth_Rotation_RotX, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_RotX)},
    {SIP_MLNAME_CAST(sipName_RotY), meth_Rotation_RotY, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_RotY)},
    {SIP_MLNAME_CAST(sipName_RotZ), meth_Rotation_RotZ, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_RotZ)},
    {SIP_MLNAME_CAST(sipName_SetInverse), meth_Rotation_SetInverse, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_SetInverse)},
    {SIP_MLNAME_CAST(sipName_UnitX), meth_Rotation_UnitX, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_UnitX)},
    {SIP_MLNAME_CAST(sipName_UnitY), meth_Rotation_UnitY, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_UnitY)},
    {SIP_MLNAME_CAST(sipName_UnitZ), meth_Rotation_UnitZ, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_UnitZ)}
};

PyDoc_STRVAR(doc_Rotation, "\1Rotation()\n"
    "Rotation(float, float, float, float, float, float, float, float, float)\n"
    "Rotation(Vector, Vector, Vector)\n"
    "Rotation(Rotation)");


sipClassTypeDef sipTypeDef_PyKDL_Rotation = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Rotation,
        {0}
    },
    {
        sipNameNr_Rotation,
        {0, 0, 1},
        24, methods_Rotation,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Rotation,
    -1,
    -1,
    0,
    slots_Rotation,
    init_type_Rotation,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Rotation,
    assign_Rotation,
    array_Rotation,
    copy_Rotation,
    release_Rotation,
    cast_Rotation,
    0,
    0,
    0,
    pickle_Rotation,
    0,
    0
};
